
Task3_Part1_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001d8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000026e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ac  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ed  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ce  00000000  00000000  000015a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000070  00000000  00000000  00001d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001dbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 ed       	ldi	r30, 0xD8	; 216
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 30       	cpi	r26, 0x02	; 2
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a2 e0       	ldi	r26, 0x02	; 2
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a4 30       	cpi	r26, 0x04	; 4
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ea:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main>:
int overflowCounter = 0;
int cycleStatus = 1; //cycle status will be for if duty cycle should be in on portion(1) or off portion(0)

int main(void)
{
	DDRB |= (1 << DDB2); //PB2 as output
  f2:	22 9a       	sbi	0x04, 2	; 4
	
	OCR0A = 255; //Load Compare Reg value
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= (1 << WGM01); // Set to CTC Mode
  f8:	84 b5       	in	r24, 0x24	; 36
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1 << OCIE0A); //Set interrupt on compare match
  fe:	ee e6       	ldi	r30, 0x6E	; 110
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	82 60       	ori	r24, 0x02	; 2
 106:	80 83       	st	Z, r24
	TCCR0B |= (1 << CS02) | (1 << CS00); // set prescaler to 1024 and starts Timer
 108:	85 b5       	in	r24, 0x25	; 37
 10a:	85 60       	ori	r24, 0x05	; 5
 10c:	85 bd       	out	0x25, r24	; 37
	sei(); // enable interrupts
 10e:	78 94       	sei
 110:	ff cf       	rjmp	.-2      	; 0x110 <main+0x1e>

00000112 <__vector_14>:
	while (1)
	{ // Main loop
	}
}
ISR (TIMER0_COMPA_vect)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	4f 93       	push	r20
 120:	5f 93       	push	r21
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
	//For a period of 0.725s, LED is on for 0.435s and then off for 0.29s. Calculations are reused from Task1_Part1
	overflowCounter++;
 126:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 12a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 134:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	if((overflowCounter >= 26) & (cycleStatus == 1)) 
 138:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 13c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	8a 31       	cpi	r24, 0x1A	; 26
 144:	91 05       	cpc	r25, r1
 146:	0c f4       	brge	.+2      	; 0x14a <__vector_14+0x38>
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	22 23       	and	r18, r18
 14c:	c1 f0       	breq	.+48     	; 0x17e <__vector_14+0x6c>
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	41 30       	cpi	r20, 0x01	; 1
 152:	51 05       	cpc	r21, r1
 154:	09 f0       	breq	.+2      	; 0x158 <__vector_14+0x46>
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	22 23       	and	r18, r18
 15a:	89 f0       	breq	.+34     	; 0x17e <__vector_14+0x6c>
	{
		OCR0A = 140;
 15c:	8c e8       	ldi	r24, 0x8C	; 140
 15e:	87 bd       	out	0x27, r24	; 39
		if(overflowCounter >= 27)
 160:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 164:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 168:	4b 97       	sbiw	r24, 0x1b	; 27
 16a:	54 f1       	brlt	.+84     	; 0x1c0 <__vector_14+0xae>
		{
			OCR0A = 255;
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	87 bd       	out	0x27, r24	; 39
			cycleStatus = 0; //set so that the LED stays off until the the cycle goes through its "off" portion
 170:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 174:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			PORTB = (1 << 2);
 178:	84 e0       	ldi	r24, 0x04	; 4
 17a:	85 b9       	out	0x05, r24	; 5
 17c:	21 c0       	rjmp	.+66     	; 0x1c0 <__vector_14+0xae>
		}
	}
	else if((overflowCounter >= 44) & (cycleStatus == 0))
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	8c 97       	sbiw	r24, 0x2c	; 44
 182:	0c f4       	brge	.+2      	; 0x186 <__vector_14+0x74>
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	22 23       	and	r18, r18
 188:	d9 f0       	breq	.+54     	; 0x1c0 <__vector_14+0xae>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	45 2b       	or	r20, r21
 18e:	09 f0       	breq	.+2      	; 0x192 <__vector_14+0x80>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	88 23       	and	r24, r24
 194:	a9 f0       	breq	.+42     	; 0x1c0 <__vector_14+0xae>
	{
		OCR0A = 64;
 196:	80 e4       	ldi	r24, 0x40	; 64
 198:	87 bd       	out	0x27, r24	; 39
		if(overflowCounter >= 45)
 19a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 19e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1a2:	8d 97       	sbiw	r24, 0x2d	; 45
 1a4:	6c f0       	brlt	.+26     	; 0x1c0 <__vector_14+0xae>
		{
			OCR0A = 255;
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	87 bd       	out	0x27, r24	; 39
			cycleStatus = 1; //set so that the LED stays on until the the cycle goes through its "on" portion
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			PORTB = (0 << 2);
 1b6:	15 b8       	out	0x05, r1	; 5
			overflowCounter = 0; //reset counter to cycle the waveform
 1b8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 1bc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		}
	}
}
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	5f 91       	pop	r21
 1c6:	4f 91       	pop	r20
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
