
Task1_Part1_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000991  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d3  00000000  00000000  00000b89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c2  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001720  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000469  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000064  00000000  00000000  00001bad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001c11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:

#include<avr/io.h>
int main(void)
{
	
	TCCR0A = 0; // Normal Operation
  cc:	14 bc       	out	0x24, r1	; 36
	DDRB |= (1 << DDB2); //PB2 as output
  ce:	22 9a       	sbi	0x04, 2	; 4
	TCCR0B |= (1 << CS02) | (1 << CS00);
  d0:	85 b5       	in	r24, 0x25	; 37
  d2:	85 60       	ori	r24, 0x05	; 5
  d4:	85 bd       	out	0x25, r24	; 37
		PORTB = (0 << 2); //Turn on LED		
		while(onCount < 26)
		{
			while ((TIFR0 & 0x01) == 0);
			TCNT0=0x00;
			TIFR0=0x01; // reset the overflow flag
  d6:	21 e0       	ldi	r18, 0x01	; 1
		};
		while(TCNT0 < 140);
		
		TCNT0=0x00; // restart the timer
		//identical calculations for 0.29s, we end up with 17 iterations and a final count up to 179
		PORTB = (1 << 2);
  d8:	34 e0       	ldi	r19, 0x04	; 4
	//For a period of 0.725s with a duty cycle of 60%, LED is on for 0.435s and off for 0.29s
	while (1)
	{
		onCount = 0;
		offCount = 0;
		TCNT0=0x00; // start the timer
  da:	16 bc       	out	0x26, r1	; 38
		
		//Using formula TCNT = (clock/prescaler*desired_time_in_seconds) - 1, calculated that a delay of 0.435s and a prescaler of 1024 requires 6795.875 for TCNT. TCNT0 can only count to 255 so 26 iterations are needed along with an additional count to 140 to achieve approximately 0.435ms
		PORTB = (0 << 2); //Turn on LED		
  dc:	15 b8       	out	0x05, r1	; 5
  de:	8a e1       	ldi	r24, 0x1A	; 26
  e0:	90 e0       	ldi	r25, 0x00	; 0
		while(onCount < 26)
		{
			while ((TIFR0 & 0x01) == 0);
  e2:	a8 9b       	sbis	0x15, 0	; 21
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <main+0x16>
			TCNT0=0x00;
  e6:	16 bc       	out	0x26, r1	; 38
			TIFR0=0x01; // reset the overflow flag
  e8:	25 bb       	out	0x15, r18	; 21
  ea:	01 97       	sbiw	r24, 0x01	; 1
		offCount = 0;
		TCNT0=0x00; // start the timer
		
		//Using formula TCNT = (clock/prescaler*desired_time_in_seconds) - 1, calculated that a delay of 0.435s and a prescaler of 1024 requires 6795.875 for TCNT. TCNT0 can only count to 255 so 26 iterations are needed along with an additional count to 140 to achieve approximately 0.435ms
		PORTB = (0 << 2); //Turn on LED		
		while(onCount < 26)
  ec:	d1 f7       	brne	.-12     	; 0xe2 <main+0x16>
			while ((TIFR0 & 0x01) == 0);
			TCNT0=0x00;
			TIFR0=0x01; // reset the overflow flag
			onCount++;
		};
		while(TCNT0 < 140);
  ee:	86 b5       	in	r24, 0x26	; 38
  f0:	8c 38       	cpi	r24, 0x8C	; 140
  f2:	e8 f3       	brcs	.-6      	; 0xee <main+0x22>
		
		TCNT0=0x00; // restart the timer
  f4:	16 bc       	out	0x26, r1	; 38
		//identical calculations for 0.29s, we end up with 17 iterations and a final count up to 179
		PORTB = (1 << 2);
  f6:	35 b9       	out	0x05, r19	; 5
  f8:	81 e1       	ldi	r24, 0x11	; 17
  fa:	90 e0       	ldi	r25, 0x00	; 0
		while(offCount < 17)
		{
			while ((TIFR0 & 0x01) == 0);
  fc:	a8 9b       	sbis	0x15, 0	; 21
  fe:	fe cf       	rjmp	.-4      	; 0xfc <main+0x30>
			TCNT0=0x00;
 100:	16 bc       	out	0x26, r1	; 38
			TIFR0=0x01; // reset the overflow flag
 102:	25 bb       	out	0x15, r18	; 21
 104:	01 97       	sbiw	r24, 0x01	; 1
		while(TCNT0 < 140);
		
		TCNT0=0x00; // restart the timer
		//identical calculations for 0.29s, we end up with 17 iterations and a final count up to 179
		PORTB = (1 << 2);
		while(offCount < 17)
 106:	d1 f7       	brne	.-12     	; 0xfc <main+0x30>
			while ((TIFR0 & 0x01) == 0);
			TCNT0=0x00;
			TIFR0=0x01; // reset the overflow flag
			offCount++;
		};
		while(TCNT0 < 179);
 108:	86 b5       	in	r24, 0x26	; 38
 10a:	83 3b       	cpi	r24, 0xB3	; 179
 10c:	e8 f3       	brcs	.-6      	; 0x108 <main+0x3c>
 10e:	e5 cf       	rjmp	.-54     	; 0xda <main+0xe>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
