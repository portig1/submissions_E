
Task3_Part2_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ac  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ed  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002da  00000000  00000000  00001531  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  0000180c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000487  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_14>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:
int switchStatus = 0; //1 = pressed, 0 = not pressed
int overflowCounter = 0; //counts overflows
int main (void)
{
	/* set PORTB.2 for output*/
	DDRB |= (1 << 2);
  dc:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << 2);
  de:	2a 9a       	sbi	0x05, 2	; 5
	
	/* set PORTC.2 for input*/
	DDRC &= (0 << 2);
  e0:	87 b1       	in	r24, 0x07	; 7
  e2:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1 << 2);	//enable pull-up
  e4:	42 9a       	sbi	0x08, 2	; 8
	/* A switch is connected to PORTC.2 and when pressed PINC.2 is set low. */
	
	OCR0A = 255; //Load Compare Reg value
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1 << OCIE0A);
  ea:	ee e6       	ldi	r30, 0x6E	; 110
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	80 83       	st	Z, r24
	sei(); //enable interrupts
  f4:	78 94       	sei
	
	TCCR0A |= (1 << WGM01); // Set to CTC Mode
  f6:	84 b5       	in	r24, 0x24	; 36
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00); // set prescaler to 1024 and start the timer
  fc:	85 b5       	in	r24, 0x25	; 37
  fe:	85 60       	ori	r24, 0x05	; 5
 100:	85 bd       	out	0x25, r24	; 37
	//From the same calculations of Task1_Part2, for a 1.25s delay 76 overflows need to occur and a count of 75 cycles.
	while (1) {
		if(!(PINC & (1 << PINC2)))
		{
			PORTB &= ~(1 << 2);
			switchStatus = 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
	TCCR0B |= (1 << CS02) | (1 << CS00); // set prescaler to 1024 and start the timer

	
	//From the same calculations of Task1_Part2, for a 1.25s delay 76 overflows need to occur and a count of 75 cycles.
	while (1) {
		if(!(PINC & (1 << PINC2)))
 106:	32 99       	sbic	0x06, 2	; 6
 108:	fe cf       	rjmp	.-4      	; 0x106 <main+0x2a>
		{
			PORTB &= ~(1 << 2);
 10a:	2a 98       	cbi	0x05, 2	; 5
			switchStatus = 1;
 10c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <switchStatus+0x1>
 110:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <switchStatus>
 114:	f8 cf       	rjmp	.-16     	; 0x106 <main+0x2a>

00000116 <__vector_14>:
	}
	return 0;
}

ISR (TIMER0_COMPA_vect) // timer0 compare interrupt
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
	if(switchStatus == 1)
 124:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <switchStatus>
 128:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <switchStatus+0x1>
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	21 f5       	brne	.+72     	; 0x178 <__vector_14+0x62>
	{
		if(overflowCounter >= 76)
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 134:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 138:	8c 34       	cpi	r24, 0x4C	; 76
 13a:	91 05       	cpc	r25, r1
 13c:	a4 f0       	brlt	.+40     	; 0x166 <__vector_14+0x50>
		{
			OCR0A = 75;
 13e:	8b e4       	ldi	r24, 0x4B	; 75
 140:	87 bd       	out	0x27, r24	; 39
			if(overflowCounter >= 77)
 142:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 146:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 14a:	8d 34       	cpi	r24, 0x4D	; 77
 14c:	91 05       	cpc	r25, r1
 14e:	5c f0       	brlt	.+22     	; 0x166 <__vector_14+0x50>
			{
				PORTB |= (1 << 2);
 150:	2a 9a       	sbi	0x05, 2	; 5
				switchStatus = 0;
 152:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <switchStatus+0x1>
 156:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <switchStatus>
				overflowCounter = 0;
 15a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 15e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				OCR0A = 255;
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	87 bd       	out	0x27, r24	; 39
			}
		}
		overflowCounter++;
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 174:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
