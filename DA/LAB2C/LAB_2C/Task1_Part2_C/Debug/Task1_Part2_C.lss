
Task1_Part2_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000982  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d3  00000000  00000000  00000b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ac  00000000  00000000  00001445  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046c  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
 */ 
#include<avr/io.h>
int main (void)
{
	/* set PORTB.2 for output*/
	DDRB |= (1 << 2);	
  cc:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << 2);
  ce:	2a 9a       	sbi	0x05, 2	; 5
	
	/* set PORTC.2 for input*/
	DDRC &= (0 << 2);
  d0:	87 b1       	in	r24, 0x07	; 7
  d2:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1 << 2);	//enable pull-up
  d4:	42 9a       	sbi	0x08, 2	; 8
	/* A switch is connected to PORTC.2 and when pressed PINC.2 is set low. */
	
	TCCR0A = 0; // Normal Operation
  d6:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00); // set prescaler to 1024 and start the timer
  d8:	85 b5       	in	r24, 0x25	; 37
  da:	85 60       	ori	r24, 0x05	; 5
  dc:	85 bd       	out	0x25, r24	; 37
	while (1) {
		if(!(PINC & (1 << PINC2)))
		{
			PORTB &= ~(1 << 2);
			TCNT0=0x00;	// reset counter
			TIFR0=0x01; // reset the overflow flag 
  de:	21 e0       	ldi	r18, 0x01	; 1
	
	int overflowCount = 0;
	
	//From the same calculations of Task1_Part1, for a 1.25s delay 76 overflows need to occur and a count of 75 cycles.
	while (1) {
		if(!(PINC & (1 << PINC2)))
  e0:	32 99       	sbic	0x06, 2	; 6
  e2:	0f c0       	rjmp	.+30     	; 0x102 <main+0x36>
		{
			PORTB &= ~(1 << 2);
  e4:	2a 98       	cbi	0x05, 2	; 5
			TCNT0=0x00;	// reset counter
  e6:	16 bc       	out	0x26, r1	; 38
			TIFR0=0x01; // reset the overflow flag 
  e8:	25 bb       	out	0x15, r18	; 21
  ea:	8c e4       	ldi	r24, 0x4C	; 76
  ec:	90 e0       	ldi	r25, 0x00	; 0
			while(overflowCount < 76)
			{
				while ((TIFR0 & 0x01) == 0);
  ee:	a8 9b       	sbis	0x15, 0	; 21
  f0:	fe cf       	rjmp	.-4      	; 0xee <main+0x22>
				TCNT0=0x00;
  f2:	16 bc       	out	0x26, r1	; 38
				TIFR0=0x01; // reset the overflow flag
  f4:	25 bb       	out	0x15, r18	; 21
  f6:	01 97       	sbiw	r24, 0x01	; 1
		if(!(PINC & (1 << PINC2)))
		{
			PORTB &= ~(1 << 2);
			TCNT0=0x00;	// reset counter
			TIFR0=0x01; // reset the overflow flag 
			while(overflowCount < 76)
  f8:	d1 f7       	brne	.-12     	; 0xee <main+0x22>
				while ((TIFR0 & 0x01) == 0);
				TCNT0=0x00;
				TIFR0=0x01; // reset the overflow flag
				overflowCount++;
			};
			while(TCNT0 < 75);
  fa:	86 b5       	in	r24, 0x26	; 38
  fc:	8b 34       	cpi	r24, 0x4B	; 75
  fe:	e8 f3       	brcs	.-6      	; 0xfa <main+0x2e>
 100:	ef cf       	rjmp	.-34     	; 0xe0 <main+0x14>
			overflowCount = 0;
		}
		else
			PORTB |= (1 << 2);
 102:	2a 9a       	sbi	0x05, 2	; 5
 104:	ed cf       	rjmp	.-38     	; 0xe0 <main+0x14>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
