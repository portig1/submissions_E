
Task2_Part1_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ae  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fe  00000000  00000000  00000c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002dc  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001830  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000095  00000000  00000000  00001cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_16>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:
//global variables
int overflowCounter = 0;

int main(void)
{
	DDRB |= (1 << DDB2); //PB2 as output
  dc:	22 9a       	sbi	0x04, 2	; 4
	TIMSK0 |= (1 << TOIE0);
  de:	ee e6       	ldi	r30, 0x6E	; 110
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	80 83       	st	Z, r24
	TCNT0 = 0; // initial value
  e8:	16 bc       	out	0x26, r1	; 38
	sei(); //enable interrupts
  ea:	78 94       	sei
	int cycleStatus = 1; //cycle status will be for if duty cycle should be in on portion(1) or off portion(0)
	TCCR0B |= (1 << CS02) | (1 << CS00); // set prescaler to 1024 and start the timer
  ec:	85 b5       	in	r24, 0x25	; 37
  ee:	85 60       	ori	r24, 0x05	; 5
  f0:	85 bd       	out	0x25, r24	; 37
{
	DDRB |= (1 << DDB2); //PB2 as output
	TIMSK0 |= (1 << TOIE0);
	TCNT0 = 0; // initial value
	sei(); //enable interrupts
	int cycleStatus = 1; //cycle status will be for if duty cycle should be in on portion(1) or off portion(0)
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	50 e0       	ldi	r21, 0x00	; 0
	TCCR0B |= (1 << CS02) | (1 << CS00); // set prescaler to 1024 and start the timer
	
	//For a period of 0.725s, LED is on for 0.435s and then off for 0.29s. Calculations are reused from Task1_Part1
	while (1)
	{
		if((overflowCounter >= 26) & (cycleStatus == 1)) {
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	60 e0       	ldi	r22, 0x00	; 0
		}
		else if((overflowCounter >= 44) & (cycleStatus == 0)) {
			while(TCNT0 < 64);
			PORTB = (0 << 2);
			overflowCounter = 0; //reset cycle counter
			cycleStatus = 1;	//set so that the LED stays on until the the cycle goes through its "on" portion
  fa:	f1 e0       	ldi	r31, 0x01	; 1
  fc:	e0 e0       	ldi	r30, 0x00	; 0
	//For a period of 0.725s, LED is on for 0.435s and then off for 0.29s. Calculations are reused from Task1_Part1
	while (1)
	{
		if((overflowCounter >= 26) & (cycleStatus == 1)) {
			while (TCNT0 < 140); 
			PORTB = (1 << 2);
  fe:	74 e0       	ldi	r23, 0x04	; 4
	TCCR0B |= (1 << CS02) | (1 << CS00); // set prescaler to 1024 and start the timer
	
	//For a period of 0.725s, LED is on for 0.435s and then off for 0.29s. Calculations are reused from Task1_Part1
	while (1)
	{
		if((overflowCounter >= 26) & (cycleStatus == 1)) {
 100:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 104:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 108:	89 2f       	mov	r24, r25
 10a:	2a 31       	cpi	r18, 0x1A	; 26
 10c:	31 05       	cpc	r19, r1
 10e:	0c f4       	brge	.+2      	; 0x112 <main+0x36>
 110:	86 2f       	mov	r24, r22
 112:	88 23       	and	r24, r24
 114:	71 f0       	breq	.+28     	; 0x132 <main+0x56>
 116:	89 2f       	mov	r24, r25
 118:	41 30       	cpi	r20, 0x01	; 1
 11a:	51 05       	cpc	r21, r1
 11c:	09 f0       	breq	.+2      	; 0x120 <main+0x44>
 11e:	86 2f       	mov	r24, r22
 120:	88 23       	and	r24, r24
 122:	39 f0       	breq	.+14     	; 0x132 <main+0x56>
			while (TCNT0 < 140); 
 124:	86 b5       	in	r24, 0x26	; 38
 126:	8c 38       	cpi	r24, 0x8C	; 140
 128:	e8 f3       	brcs	.-6      	; 0x124 <main+0x48>
			PORTB = (1 << 2);
 12a:	75 b9       	out	0x05, r23	; 5
			cycleStatus = 0;//set so that the LED stays off until the the cycle goes through its "off" portion
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	50 e0       	ldi	r21, 0x00	; 0
 130:	e7 cf       	rjmp	.-50     	; 0x100 <main+0x24>
		}
		else if((overflowCounter >= 44) & (cycleStatus == 0)) {
 132:	89 2f       	mov	r24, r25
 134:	2c 32       	cpi	r18, 0x2C	; 44
 136:	31 05       	cpc	r19, r1
 138:	0c f4       	brge	.+2      	; 0x13c <main+0x60>
 13a:	86 2f       	mov	r24, r22
 13c:	88 23       	and	r24, r24
 13e:	01 f3       	breq	.-64     	; 0x100 <main+0x24>
 140:	89 2f       	mov	r24, r25
 142:	41 15       	cp	r20, r1
 144:	51 05       	cpc	r21, r1
 146:	09 f0       	breq	.+2      	; 0x14a <main+0x6e>
 148:	86 2f       	mov	r24, r22
 14a:	88 23       	and	r24, r24
 14c:	c9 f2       	breq	.-78     	; 0x100 <main+0x24>
			while(TCNT0 < 64);
 14e:	86 b5       	in	r24, 0x26	; 38
 150:	80 34       	cpi	r24, 0x40	; 64
 152:	e8 f3       	brcs	.-6      	; 0x14e <main+0x72>
			PORTB = (0 << 2);
 154:	15 b8       	out	0x05, r1	; 5
			overflowCounter = 0; //reset cycle counter
 156:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 15a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			cycleStatus = 1;	//set so that the LED stays on until the the cycle goes through its "on" portion
			TCNT0 = 0;
 15e:	16 bc       	out	0x26, r1	; 38
		}
		else if((overflowCounter >= 44) & (cycleStatus == 0)) {
			while(TCNT0 < 64);
			PORTB = (0 << 2);
			overflowCounter = 0; //reset cycle counter
			cycleStatus = 1;	//set so that the LED stays on until the the cycle goes through its "on" portion
 160:	4f 2f       	mov	r20, r31
 162:	5e 2f       	mov	r21, r30
 164:	cd cf       	rjmp	.-102    	; 0x100 <main+0x24>

00000166 <__vector_16>:
		}
	}
}

ISR (TIMER0_OVF_vect) // timer0 overflow interrupt
{
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
	TCNT0 = 0;
 174:	16 bc       	out	0x26, r1	; 38
	overflowCounter++;
 176:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 17a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 184:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
