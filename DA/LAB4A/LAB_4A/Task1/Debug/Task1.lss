
Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000a5a  00000aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800106  00800106  00000af4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fa9  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4e  00000000  00000000  00001b79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f8  00000000  00000000  000025c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00002bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000534  00000000  00000000  00002c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006dc  00000000  00000000  00003190  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000386c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_4>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e5       	ldi	r30, 0x5A	; 90
  c8:	fa e0       	ldi	r31, 0x0A	; 10
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 30       	cpi	r26, 0x06	; 6
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e0       	ldi	r26, 0x06	; 6
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	aa 30       	cpi	r26, 0x0A	; 10
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 ce 00 	call	0x19c	; 0x19c <main>
  ea:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_4>:
	}
	return 0;
}

ISR(PCINT1_vect) //For Pin Change INT 9 on PC1
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
	psuedoFallingEdgeDetector++;
 102:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 106:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 110:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	if(psuedoFallingEdgeDetector > 1) //Only after the pin change interrupt occurs a second time will it toggle, needed since there isn't a default way of making it so the interrupt occurs on the falling edge.
 114:	02 97       	sbiw	r24, 0x02	; 2
 116:	74 f0       	brlt	.+28     	; 0x134 <__vector_4+0x42>
	{
		MTR_Status ^= 1; //Toggles MTR_Status
 118:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <MTR_Status>
 11c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <MTR_Status+0x1>
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	82 27       	eor	r24, r18
 124:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <MTR_Status+0x1>
 128:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <MTR_Status>
		psuedoFallingEdgeDetector = 0;
 12c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 130:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	93 ec       	ldi	r25, 0xC3	; 195
 138:	29 e0       	ldi	r18, 0x09	; 9
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	20 40       	sbci	r18, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <__vector_4+0x48>
 142:	00 c0       	rjmp	.+0      	; 0x144 <__vector_4+0x52>
 144:	00 00       	nop
	}
	_delay_ms(200); //Delay for switch debouncing
}
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <usart_init>:

void usart_init (void)
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER >> 8);
 156:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 15a:	87 e6       	ldi	r24, 0x67	; 103
 15c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 160:	88 e1       	ldi	r24, 0x18	; 24
 162:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3 << UCSZ00);
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 16c:	08 95       	ret

0000016e <USART_send>:
}


void USART_send( unsigned char data) {

	while (!(UCSR0A & (1 << UDRE0))); //wait until UDR0 is empty
 16e:	e0 ec       	ldi	r30, 0xC0	; 192
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	90 81       	ld	r25, Z
 174:	95 ff       	sbrs	r25, 5
 176:	fd cf       	rjmp	.-6      	; 0x172 <USART_send+0x4>
	UDR0 = data;					 //transmit ch
 178:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 17c:	08 95       	ret

0000017e <USART_putstring>:

}

void USART_putstring(char* StringPtr) {
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	ec 01       	movw	r28, r24

	while (*StringPtr != 0x00) {
 184:	88 81       	ld	r24, Y
 186:	88 23       	and	r24, r24
 188:	31 f0       	breq	.+12     	; 0x196 <USART_putstring+0x18>
 18a:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 18c:	0e 94 b7 00 	call	0x16e	; 0x16e <USART_send>

}

void USART_putstring(char* StringPtr) {

	while (*StringPtr != 0x00) {
 190:	89 91       	ld	r24, Y+
 192:	81 11       	cpse	r24, r1
 194:	fb cf       	rjmp	.-10     	; 0x18c <USART_putstring+0xe>
		USART_send(*StringPtr);
		StringPtr++;
	}

}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <main>:

int MTR_Status = 0; //Will be used for the pin change interrupt to toggle whether the motor can be on or off
int psuedoFallingEdgeDetector = 0; //Will be used so that only on the falling edge of the pin change process will the MTR _Status be toggled

int main (void)
{
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
 1a4:	64 97       	sbiw	r28, 0x14	; 20
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xFF;
 1b4:	85 b9       	out	0x05, r24	; 5
	usart_init ();
 1b6:	0e 94 ab 00 	call	0x156	; 0x156 <usart_init>
	
	PCICR = (1 << PCIE1);
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK1 = (1 << PCINT9);	//Enable pin change interrupt vector 1 then enable pin change interrupt 9
 1c0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	sei();
 1c4:	78 94       	sei
	
	/** Setup and enable ADC **/
	ADMUX = (0<<REFS1)|    // Reference Selection Bits
 1c6:	80 e4       	ldi	r24, 0x40	; 64
 1c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	(0<<ADLAR)|    // ADC Left Adjust Result
	(0<<MUX2)|     // Analog Channel Selection Bits
	(0<<MUX1)|     // ADC0 (PC0) Potentionmeter 
	(0<<MUX0);
	
	ADCSRA = (1<<ADEN)|    // ADC Enable
 1cc:	85 e8       	ldi	r24, 0x85	; 133
 1ce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	(0<<ADPS1)|	   // CLK/32
	(1<<ADPS0);
	
	while (1)
	{
		PORTC = (1 << 1); //Enable pull-up for PC1
 1d2:	68 94       	set
 1d4:	33 24       	eor	r3, r3
 1d6:	31 f8       	bld	r3, 1
		ADCSRA|=(1<<ADSC);	//start conversion
 1d8:	0a e7       	ldi	r16, 0x7A	; 122
 1da:	10 e0       	ldi	r17, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
		
		ADCSRA |= (1<<ADIF);
		
		int tempC = ADCL;
 1dc:	0f 2e       	mov	r0, r31
 1de:	f8 e7       	ldi	r31, 0x78	; 120
 1e0:	8f 2e       	mov	r8, r31
 1e2:	91 2c       	mov	r9, r1
 1e4:	f0 2d       	mov	r31, r0
		tempC = tempC | (ADCH<<8);
 1e6:	0f 2e       	mov	r0, r31
 1e8:	f9 e7       	ldi	r31, 0x79	; 121
 1ea:	6f 2e       	mov	r6, r31
 1ec:	71 2c       	mov	r7, r1
 1ee:	f0 2d       	mov	r31, r0
		
		char output[20];
		snprintf(output, sizeof(output), "%d\r\n", tempC); //prints out potentiometer value to serial terminal
 1f0:	0f 2e       	mov	r0, r31
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	af 2e       	mov	r10, r31
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	bf 2e       	mov	r11, r31
 1fa:	f0 2d       	mov	r31, r0
 1fc:	0f 2e       	mov	r0, r31
 1fe:	f4 e1       	ldi	r31, 0x14	; 20
 200:	4f 2e       	mov	r4, r31
 202:	f0 2d       	mov	r31, r0
 204:	ce 01       	movw	r24, r28
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	6c 01       	movw	r12, r24
				_delay_us(50);
			}
			else
			{
				//Disable motor
				PORTB = 0xFF;
 20a:	55 24       	eor	r5, r5
 20c:	5a 94       	dec	r5
	(0<<ADPS1)|	   // CLK/32
	(1<<ADPS0);
	
	while (1)
	{
		PORTC = (1 << 1); //Enable pull-up for PC1
 20e:	38 b8       	out	0x08, r3	; 8
		ADCSRA|=(1<<ADSC);	//start conversion
 210:	f8 01       	movw	r30, r16
 212:	80 81       	ld	r24, Z
 214:	80 64       	ori	r24, 0x40	; 64
 216:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
 218:	f8 01       	movw	r30, r16
 21a:	80 81       	ld	r24, Z
 21c:	84 ff       	sbrs	r24, 4
 21e:	fc cf       	rjmp	.-8      	; 0x218 <main+0x7c>
		
		ADCSRA |= (1<<ADIF);
 220:	80 81       	ld	r24, Z
 222:	80 61       	ori	r24, 0x10	; 16
 224:	80 83       	st	Z, r24
		
		int tempC = ADCL;
 226:	f4 01       	movw	r30, r8
 228:	e0 80       	ld	r14, Z
		tempC = tempC | (ADCH<<8);
 22a:	f3 01       	movw	r30, r6
 22c:	80 81       	ld	r24, Z
 22e:	f1 2c       	mov	r15, r1
 230:	f8 2a       	or	r15, r24
		
		char output[20];
		snprintf(output, sizeof(output), "%d\r\n", tempC); //prints out potentiometer value to serial terminal
 232:	ff 92       	push	r15
 234:	ef 92       	push	r14
 236:	bf 92       	push	r11
 238:	af 92       	push	r10
 23a:	1f 92       	push	r1
 23c:	4f 92       	push	r4
 23e:	df 92       	push	r13
 240:	cf 92       	push	r12
 242:	0e 94 33 02 	call	0x466	; 0x466 <snprintf>
		USART_putstring(output);
 246:	c6 01       	movw	r24, r12
 248:	0e 94 bf 00 	call	0x17e	; 0x17e <USART_putstring>

		//When the ADC value from the potentiometer is below 10, a duty cycle of 0% will be output. Then above 10 and below 20, a duty cycle of 10%. This goes on until the value is above
		//90 for which only a 95% duty cycle will be produced
		if((0 <= tempC) & (tempC < 10))
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
 256:	9a e0       	ldi	r25, 0x0A	; 10
 258:	e9 16       	cp	r14, r25
 25a:	f1 04       	cpc	r15, r1
 25c:	88 f4       	brcc	.+34     	; 0x280 <main+0xe4>
		{
			if(MTR_Status)
 25e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <MTR_Status>
 262:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <MTR_Status+0x1>
 266:	89 2b       	or	r24, r25
 268:	49 f0       	breq	.+18     	; 0x27c <main+0xe0>
			{
				//DC = 0%
				//Enable motor in clockwise direction;
				PORTB = 0;
 26a:	15 b8       	out	0x05, r1	; 5
				_delay_us(0);
				//Disable motor
				PORTB = 0xFF;
 26c:	55 b8       	out	0x05, r5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	ef e9       	ldi	r30, 0x9F	; 159
 270:	ff e0       	ldi	r31, 0x0F	; 15
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <main+0xd6>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0xdc>
 278:	00 00       	nop
 27a:	c9 cf       	rjmp	.-110    	; 0x20e <main+0x72>
				_delay_us(1000);
			}
			else
			{
				//Disable motor
				PORTB = 0xFF;
 27c:	55 b8       	out	0x05, r5	; 5
 27e:	c7 cf       	rjmp	.-114    	; 0x20e <main+0x72>
			}
		}
		else if((10 <= tempC) & (tempC < 20))
 280:	c7 01       	movw	r24, r14
 282:	0a 97       	sbiw	r24, 0x0a	; 10
 284:	0a 97       	sbiw	r24, 0x0a	; 10
 286:	b8 f4       	brcc	.+46     	; 0x2b6 <main+0x11a>
		{
			if(MTR_Status)
 288:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <MTR_Status>
 28c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <MTR_Status+0x1>
 290:	89 2b       	or	r24, r25
 292:	79 f0       	breq	.+30     	; 0x2b2 <main+0x116>
			{
				//DC = 10%
				//Enable motor in clockwise direction;
				PORTB = 0;
 294:	15 b8       	out	0x05, r1	; 5
 296:	8f e8       	ldi	r24, 0x8F	; 143
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <main+0xfe>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <main+0x104>
 2a0:	00 00       	nop
				_delay_us(100);
				//Disable motor
				PORTB = 0xFF;
 2a2:	55 b8       	out	0x05, r5	; 5
 2a4:	ef e0       	ldi	r30, 0x0F	; 15
 2a6:	fe e0       	ldi	r31, 0x0E	; 14
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <main+0x10c>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0x112>
 2ae:	00 00       	nop
 2b0:	ae cf       	rjmp	.-164    	; 0x20e <main+0x72>
				_delay_us(900);
			}
			else
			{
				//Disable motor
				PORTB = 0xFF;
 2b2:	55 b8       	out	0x05, r5	; 5
 2b4:	ac cf       	rjmp	.-168    	; 0x20e <main+0x72>
			}
		}
		else if((20 <= tempC) & (tempC < 30))
 2b6:	c7 01       	movw	r24, r14
 2b8:	44 97       	sbiw	r24, 0x14	; 20
 2ba:	0a 97       	sbiw	r24, 0x0a	; 10
 2bc:	b8 f4       	brcc	.+46     	; 0x2ec <main+0x150>
		{
			if(MTR_Status)
 2be:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <MTR_Status>
 2c2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <MTR_Status+0x1>
 2c6:	89 2b       	or	r24, r25
 2c8:	79 f0       	breq	.+30     	; 0x2e8 <main+0x14c>
			{
				//DC = 20%
				//Enable motor in clockwise direction;
				PORTB = 0;
 2ca:	15 b8       	out	0x05, r1	; 5
 2cc:	8f e1       	ldi	r24, 0x1F	; 31
 2ce:	93 e0       	ldi	r25, 0x03	; 3
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <main+0x134>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <main+0x13a>
 2d6:	00 00       	nop
				_delay_us(200);
				//Disable motor
				PORTB = 0xFF;
 2d8:	55 b8       	out	0x05, r5	; 5
 2da:	ef e7       	ldi	r30, 0x7F	; 127
 2dc:	fc e0       	ldi	r31, 0x0C	; 12
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <main+0x142>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x148>
 2e4:	00 00       	nop
 2e6:	93 cf       	rjmp	.-218    	; 0x20e <main+0x72>
				_delay_us(800);
			}
			else
			{
				//Disable motor
				PORTB = 0xFF;
 2e8:	55 b8       	out	0x05, r5	; 5
 2ea:	91 cf       	rjmp	.-222    	; 0x20e <main+0x72>
			}
		}
		else if((30 <= tempC) & (tempC < 40))
 2ec:	c7 01       	movw	r24, r14
 2ee:	4e 97       	sbiw	r24, 0x1e	; 30
 2f0:	0a 97       	sbiw	r24, 0x0a	; 10
 2f2:	b8 f4       	brcc	.+46     	; 0x322 <main+0x186>
		{
			if(MTR_Status)
 2f4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <MTR_Status>
 2f8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <MTR_Status+0x1>
 2fc:	89 2b       	or	r24, r25
 2fe:	79 f0       	breq	.+30     	; 0x31e <main+0x182>
			{
				//DC = 30%
				//Enable motor in clockwise direction;
				PORTB = 0;
 300:	15 b8       	out	0x05, r1	; 5
 302:	8f ea       	ldi	r24, 0xAF	; 175
 304:	94 e0       	ldi	r25, 0x04	; 4
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <main+0x16a>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <main+0x170>
 30c:	00 00       	nop
				_delay_us(300);
				//Disable motor
				PORTB = 0xFF;
 30e:	55 b8       	out	0x05, r5	; 5
 310:	ef ee       	ldi	r30, 0xEF	; 239
 312:	fa e0       	ldi	r31, 0x0A	; 10
 314:	31 97       	sbiw	r30, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <main+0x178>
 318:	00 c0       	rjmp	.+0      	; 0x31a <main+0x17e>
 31a:	00 00       	nop
 31c:	78 cf       	rjmp	.-272    	; 0x20e <main+0x72>
				_delay_us(700);
			}
			else
			{
				//Disable motor
				PORTB = 0xFF;
 31e:	55 b8       	out	0x05, r5	; 5
 320:	76 cf       	rjmp	.-276    	; 0x20e <main+0x72>
			}
		}
		else if((40 <= tempC) & (tempC < 50))
 322:	c7 01       	movw	r24, r14
 324:	88 97       	sbiw	r24, 0x28	; 40
 326:	0a 97       	sbiw	r24, 0x0a	; 10
 328:	b8 f4       	brcc	.+46     	; 0x358 <main+0x1bc>
		{
			if(MTR_Status)
 32a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <MTR_Status>
 32e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <MTR_Status+0x1>
 332:	89 2b       	or	r24, r25
 334:	79 f0       	breq	.+30     	; 0x354 <main+0x1b8>
			{
				//DC = 40%
				//Enable motor in clockwise direction;
				PORTB = 0;
 336:	15 b8       	out	0x05, r1	; 5
 338:	8f e3       	ldi	r24, 0x3F	; 63
 33a:	96 e0       	ldi	r25, 0x06	; 6
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <main+0x1a0>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0x1a6>
 342:	00 00       	nop
				_delay_us(400);
				//Disable motor
				PORTB = 0xFF;
 344:	55 b8       	out	0x05, r5	; 5
 346:	ef e5       	ldi	r30, 0x5F	; 95
 348:	f9 e0       	ldi	r31, 0x09	; 9
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <main+0x1ae>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x1b4>
 350:	00 00       	nop
 352:	5d cf       	rjmp	.-326    	; 0x20e <main+0x72>
				_delay_us(600);
			}
			else
			{
				//Disable motor
				PORTB = 0xFF;
 354:	55 b8       	out	0x05, r5	; 5
 356:	5b cf       	rjmp	.-330    	; 0x20e <main+0x72>
			}
		}
		else if((50 <= tempC) & (tempC < 60))
 358:	c7 01       	movw	r24, r14
 35a:	c2 97       	sbiw	r24, 0x32	; 50
 35c:	0a 97       	sbiw	r24, 0x0a	; 10
 35e:	b8 f4       	brcc	.+46     	; 0x38e <main+0x1f2>
		{
			if(MTR_Status)
 360:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <MTR_Status>
 364:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <MTR_Status+0x1>
 368:	89 2b       	or	r24, r25
 36a:	79 f0       	breq	.+30     	; 0x38a <main+0x1ee>
			{
				//DC = 50%
				//Enable motor in clockwise direction;
				PORTB = 0;
 36c:	15 b8       	out	0x05, r1	; 5
 36e:	8f ec       	ldi	r24, 0xCF	; 207
 370:	97 e0       	ldi	r25, 0x07	; 7
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <main+0x1d6>
 376:	00 c0       	rjmp	.+0      	; 0x378 <main+0x1dc>
 378:	00 00       	nop
				_delay_us(500);
				//Disable motor
				PORTB = 0xFF;
 37a:	55 b8       	out	0x05, r5	; 5
 37c:	ef ec       	ldi	r30, 0xCF	; 207
 37e:	f7 e0       	ldi	r31, 0x07	; 7
 380:	31 97       	sbiw	r30, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <main+0x1e4>
 384:	00 c0       	rjmp	.+0      	; 0x386 <main+0x1ea>
 386:	00 00       	nop
 388:	42 cf       	rjmp	.-380    	; 0x20e <main+0x72>
				_delay_us(500);
			}
			else
			{
				//Disable motor
				PORTB = 0xFF;
 38a:	55 b8       	out	0x05, r5	; 5
 38c:	40 cf       	rjmp	.-384    	; 0x20e <main+0x72>
			}
		}
		else if((60 <= tempC) & (tempC < 70))
 38e:	c7 01       	movw	r24, r14
 390:	cc 97       	sbiw	r24, 0x3c	; 60
 392:	0a 97       	sbiw	r24, 0x0a	; 10
 394:	b8 f4       	brcc	.+46     	; 0x3c4 <main+0x228>
		{
			if(MTR_Status)
 396:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <MTR_Status>
 39a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <MTR_Status+0x1>
 39e:	89 2b       	or	r24, r25
 3a0:	79 f0       	breq	.+30     	; 0x3c0 <main+0x224>
			{
				//DC = 60%
				//Enable motor in clockwise direction;
				PORTB = 0;
 3a2:	15 b8       	out	0x05, r1	; 5
 3a4:	8f e5       	ldi	r24, 0x5F	; 95
 3a6:	99 e0       	ldi	r25, 0x09	; 9
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <main+0x20c>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <main+0x212>
 3ae:	00 00       	nop
				_delay_us(600);
				//Disable motor
				PORTB = 0xFF;
 3b0:	55 b8       	out	0x05, r5	; 5
 3b2:	ef e3       	ldi	r30, 0x3F	; 63
 3b4:	f6 e0       	ldi	r31, 0x06	; 6
 3b6:	31 97       	sbiw	r30, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <main+0x21a>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <main+0x220>
 3bc:	00 00       	nop
 3be:	27 cf       	rjmp	.-434    	; 0x20e <main+0x72>
				_delay_us(400);
			}
			else
			{
				//Disable motor
				PORTB = 0xFF;
 3c0:	55 b8       	out	0x05, r5	; 5
 3c2:	25 cf       	rjmp	.-438    	; 0x20e <main+0x72>
			}
		}
		else if((70 <= tempC) & (tempC < 80))
 3c4:	c7 01       	movw	r24, r14
 3c6:	86 54       	subi	r24, 0x46	; 70
 3c8:	91 09       	sbc	r25, r1
 3ca:	0a 97       	sbiw	r24, 0x0a	; 10
 3cc:	b8 f4       	brcc	.+46     	; 0x3fc <main+0x260>
		{
			if(MTR_Status)
 3ce:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <MTR_Status>
 3d2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <MTR_Status+0x1>
 3d6:	89 2b       	or	r24, r25
 3d8:	79 f0       	breq	.+30     	; 0x3f8 <main+0x25c>
			{
				//DC = 70%
				//Enable motor in clockwise direction;
				PORTB = 0;
 3da:	15 b8       	out	0x05, r1	; 5
 3dc:	8f ee       	ldi	r24, 0xEF	; 239
 3de:	9a e0       	ldi	r25, 0x0A	; 10
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <main+0x244>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <main+0x24a>
 3e6:	00 00       	nop
				_delay_us(700);
				//Disable motor
				PORTB = 0xFF;
 3e8:	55 b8       	out	0x05, r5	; 5
 3ea:	ef ea       	ldi	r30, 0xAF	; 175
 3ec:	f4 e0       	ldi	r31, 0x04	; 4
 3ee:	31 97       	sbiw	r30, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <main+0x252>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <main+0x258>
 3f4:	00 00       	nop
 3f6:	0b cf       	rjmp	.-490    	; 0x20e <main+0x72>
				_delay_us(300);
			}
			else
			{
				//Disable motor
				PORTB = 0xFF;
 3f8:	55 b8       	out	0x05, r5	; 5
 3fa:	09 cf       	rjmp	.-494    	; 0x20e <main+0x72>
			}
		}
		else if((80 <= tempC) & (tempC < 90))
 3fc:	f0 e5       	ldi	r31, 0x50	; 80
 3fe:	ef 1a       	sub	r14, r31
 400:	f1 08       	sbc	r15, r1
 402:	8a e0       	ldi	r24, 0x0A	; 10
 404:	e8 16       	cp	r14, r24
 406:	f1 04       	cpc	r15, r1
 408:	b8 f4       	brcc	.+46     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		{
			if(MTR_Status)
 40a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <MTR_Status>
 40e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <MTR_Status+0x1>
 412:	89 2b       	or	r24, r25
 414:	79 f0       	breq	.+30     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
			{
				//DC = 80%
				//Enable motor in clockwise direction;
				PORTB = 0;
 416:	15 b8       	out	0x05, r1	; 5
 418:	ef e7       	ldi	r30, 0x7F	; 127
 41a:	fc e0       	ldi	r31, 0x0C	; 12
 41c:	31 97       	sbiw	r30, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 422:	00 00       	nop
				_delay_us(800);
				//Disable motor
				PORTB = 0xFF;
 424:	55 b8       	out	0x05, r5	; 5
 426:	8f e1       	ldi	r24, 0x1F	; 31
 428:	93 e0       	ldi	r25, 0x03	; 3
 42a:	01 97       	sbiw	r24, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 430:	00 00       	nop
 432:	ed ce       	rjmp	.-550    	; 0x20e <main+0x72>
				_delay_us(200);
			}
			else
			{
				//Disable motor
				PORTB = 0xFF;
 434:	55 b8       	out	0x05, r5	; 5
 436:	eb ce       	rjmp	.-554    	; 0x20e <main+0x72>
			}
		}
		else
		{
			if(MTR_Status)
 438:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <MTR_Status>
 43c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <MTR_Status+0x1>
 440:	89 2b       	or	r24, r25
 442:	79 f0       	breq	.+30     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			{
				//DC = 95%
				//Enable motor in clockwise direction;
				PORTB = 0;
 444:	15 b8       	out	0x05, r1	; 5
 446:	e7 ed       	ldi	r30, 0xD7	; 215
 448:	fe e0       	ldi	r31, 0x0E	; 14
 44a:	31 97       	sbiw	r30, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 450:	00 00       	nop
				_delay_us(950);
				//Disable motor
				PORTB = 0xFF;
 452:	55 b8       	out	0x05, r5	; 5
 454:	87 ec       	ldi	r24, 0xC7	; 199
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45e:	00 00       	nop
 460:	d6 ce       	rjmp	.-596    	; 0x20e <main+0x72>
				_delay_us(50);
			}
			else
			{
				//Disable motor
				PORTB = 0xFF;
 462:	55 b8       	out	0x05, r5	; 5
			}
		}
		
	}
 464:	d4 ce       	rjmp	.-600    	; 0x20e <main+0x72>

00000466 <snprintf>:
 466:	ae e0       	ldi	r26, 0x0E	; 14
 468:	b0 e0       	ldi	r27, 0x00	; 0
 46a:	e9 e3       	ldi	r30, 0x39	; 57
 46c:	f2 e0       	ldi	r31, 0x02	; 2
 46e:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__prologue_saves__+0x1c>
 472:	0d 89       	ldd	r16, Y+21	; 0x15
 474:	1e 89       	ldd	r17, Y+22	; 0x16
 476:	8f 89       	ldd	r24, Y+23	; 0x17
 478:	98 8d       	ldd	r25, Y+24	; 0x18
 47a:	26 e0       	ldi	r18, 0x06	; 6
 47c:	2c 83       	std	Y+4, r18	; 0x04
 47e:	1a 83       	std	Y+2, r17	; 0x02
 480:	09 83       	std	Y+1, r16	; 0x01
 482:	97 ff       	sbrs	r25, 7
 484:	02 c0       	rjmp	.+4      	; 0x48a <snprintf+0x24>
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	90 e8       	ldi	r25, 0x80	; 128
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	9e 83       	std	Y+6, r25	; 0x06
 48e:	8d 83       	std	Y+5, r24	; 0x05
 490:	ae 01       	movw	r20, r28
 492:	45 5e       	subi	r20, 0xE5	; 229
 494:	5f 4f       	sbci	r21, 0xFF	; 255
 496:	69 8d       	ldd	r22, Y+25	; 0x19
 498:	7a 8d       	ldd	r23, Y+26	; 0x1a
 49a:	ce 01       	movw	r24, r28
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <vfprintf>
 4a2:	4d 81       	ldd	r20, Y+5	; 0x05
 4a4:	5e 81       	ldd	r21, Y+6	; 0x06
 4a6:	57 fd       	sbrc	r21, 7
 4a8:	0a c0       	rjmp	.+20     	; 0x4be <snprintf+0x58>
 4aa:	2f 81       	ldd	r18, Y+7	; 0x07
 4ac:	38 85       	ldd	r19, Y+8	; 0x08
 4ae:	42 17       	cp	r20, r18
 4b0:	53 07       	cpc	r21, r19
 4b2:	0c f4       	brge	.+2      	; 0x4b6 <snprintf+0x50>
 4b4:	9a 01       	movw	r18, r20
 4b6:	f8 01       	movw	r30, r16
 4b8:	e2 0f       	add	r30, r18
 4ba:	f3 1f       	adc	r31, r19
 4bc:	10 82       	st	Z, r1
 4be:	2e 96       	adiw	r28, 0x0e	; 14
 4c0:	e4 e0       	ldi	r30, 0x04	; 4
 4c2:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__epilogue_restores__+0x1c>

000004c6 <vfprintf>:
 4c6:	ab e0       	ldi	r26, 0x0B	; 11
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	e9 e6       	ldi	r30, 0x69	; 105
 4cc:	f2 e0       	ldi	r31, 0x02	; 2
 4ce:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__prologue_saves__>
 4d2:	6c 01       	movw	r12, r24
 4d4:	7b 01       	movw	r14, r22
 4d6:	8a 01       	movw	r16, r20
 4d8:	fc 01       	movw	r30, r24
 4da:	17 82       	std	Z+7, r1	; 0x07
 4dc:	16 82       	std	Z+6, r1	; 0x06
 4de:	83 81       	ldd	r24, Z+3	; 0x03
 4e0:	81 ff       	sbrs	r24, 1
 4e2:	cc c1       	rjmp	.+920    	; 0x87c <vfprintf+0x3b6>
 4e4:	ce 01       	movw	r24, r28
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	3c 01       	movw	r6, r24
 4ea:	f6 01       	movw	r30, r12
 4ec:	93 81       	ldd	r25, Z+3	; 0x03
 4ee:	f7 01       	movw	r30, r14
 4f0:	93 fd       	sbrc	r25, 3
 4f2:	85 91       	lpm	r24, Z+
 4f4:	93 ff       	sbrs	r25, 3
 4f6:	81 91       	ld	r24, Z+
 4f8:	7f 01       	movw	r14, r30
 4fa:	88 23       	and	r24, r24
 4fc:	09 f4       	brne	.+2      	; 0x500 <vfprintf+0x3a>
 4fe:	ba c1       	rjmp	.+884    	; 0x874 <vfprintf+0x3ae>
 500:	85 32       	cpi	r24, 0x25	; 37
 502:	39 f4       	brne	.+14     	; 0x512 <vfprintf+0x4c>
 504:	93 fd       	sbrc	r25, 3
 506:	85 91       	lpm	r24, Z+
 508:	93 ff       	sbrs	r25, 3
 50a:	81 91       	ld	r24, Z+
 50c:	7f 01       	movw	r14, r30
 50e:	85 32       	cpi	r24, 0x25	; 37
 510:	29 f4       	brne	.+10     	; 0x51c <vfprintf+0x56>
 512:	b6 01       	movw	r22, r12
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 51a:	e7 cf       	rjmp	.-50     	; 0x4ea <vfprintf+0x24>
 51c:	91 2c       	mov	r9, r1
 51e:	21 2c       	mov	r2, r1
 520:	31 2c       	mov	r3, r1
 522:	ff e1       	ldi	r31, 0x1F	; 31
 524:	f3 15       	cp	r31, r3
 526:	d8 f0       	brcs	.+54     	; 0x55e <vfprintf+0x98>
 528:	8b 32       	cpi	r24, 0x2B	; 43
 52a:	79 f0       	breq	.+30     	; 0x54a <vfprintf+0x84>
 52c:	38 f4       	brcc	.+14     	; 0x53c <vfprintf+0x76>
 52e:	80 32       	cpi	r24, 0x20	; 32
 530:	79 f0       	breq	.+30     	; 0x550 <vfprintf+0x8a>
 532:	83 32       	cpi	r24, 0x23	; 35
 534:	a1 f4       	brne	.+40     	; 0x55e <vfprintf+0x98>
 536:	23 2d       	mov	r18, r3
 538:	20 61       	ori	r18, 0x10	; 16
 53a:	1d c0       	rjmp	.+58     	; 0x576 <vfprintf+0xb0>
 53c:	8d 32       	cpi	r24, 0x2D	; 45
 53e:	61 f0       	breq	.+24     	; 0x558 <vfprintf+0x92>
 540:	80 33       	cpi	r24, 0x30	; 48
 542:	69 f4       	brne	.+26     	; 0x55e <vfprintf+0x98>
 544:	23 2d       	mov	r18, r3
 546:	21 60       	ori	r18, 0x01	; 1
 548:	16 c0       	rjmp	.+44     	; 0x576 <vfprintf+0xb0>
 54a:	83 2d       	mov	r24, r3
 54c:	82 60       	ori	r24, 0x02	; 2
 54e:	38 2e       	mov	r3, r24
 550:	e3 2d       	mov	r30, r3
 552:	e4 60       	ori	r30, 0x04	; 4
 554:	3e 2e       	mov	r3, r30
 556:	2a c0       	rjmp	.+84     	; 0x5ac <vfprintf+0xe6>
 558:	f3 2d       	mov	r31, r3
 55a:	f8 60       	ori	r31, 0x08	; 8
 55c:	1d c0       	rjmp	.+58     	; 0x598 <vfprintf+0xd2>
 55e:	37 fc       	sbrc	r3, 7
 560:	2d c0       	rjmp	.+90     	; 0x5bc <vfprintf+0xf6>
 562:	20 ed       	ldi	r18, 0xD0	; 208
 564:	28 0f       	add	r18, r24
 566:	2a 30       	cpi	r18, 0x0A	; 10
 568:	40 f0       	brcs	.+16     	; 0x57a <vfprintf+0xb4>
 56a:	8e 32       	cpi	r24, 0x2E	; 46
 56c:	b9 f4       	brne	.+46     	; 0x59c <vfprintf+0xd6>
 56e:	36 fc       	sbrc	r3, 6
 570:	81 c1       	rjmp	.+770    	; 0x874 <vfprintf+0x3ae>
 572:	23 2d       	mov	r18, r3
 574:	20 64       	ori	r18, 0x40	; 64
 576:	32 2e       	mov	r3, r18
 578:	19 c0       	rjmp	.+50     	; 0x5ac <vfprintf+0xe6>
 57a:	36 fe       	sbrs	r3, 6
 57c:	06 c0       	rjmp	.+12     	; 0x58a <vfprintf+0xc4>
 57e:	8a e0       	ldi	r24, 0x0A	; 10
 580:	98 9e       	mul	r9, r24
 582:	20 0d       	add	r18, r0
 584:	11 24       	eor	r1, r1
 586:	92 2e       	mov	r9, r18
 588:	11 c0       	rjmp	.+34     	; 0x5ac <vfprintf+0xe6>
 58a:	ea e0       	ldi	r30, 0x0A	; 10
 58c:	2e 9e       	mul	r2, r30
 58e:	20 0d       	add	r18, r0
 590:	11 24       	eor	r1, r1
 592:	22 2e       	mov	r2, r18
 594:	f3 2d       	mov	r31, r3
 596:	f0 62       	ori	r31, 0x20	; 32
 598:	3f 2e       	mov	r3, r31
 59a:	08 c0       	rjmp	.+16     	; 0x5ac <vfprintf+0xe6>
 59c:	8c 36       	cpi	r24, 0x6C	; 108
 59e:	21 f4       	brne	.+8      	; 0x5a8 <vfprintf+0xe2>
 5a0:	83 2d       	mov	r24, r3
 5a2:	80 68       	ori	r24, 0x80	; 128
 5a4:	38 2e       	mov	r3, r24
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <vfprintf+0xe6>
 5a8:	88 36       	cpi	r24, 0x68	; 104
 5aa:	41 f4       	brne	.+16     	; 0x5bc <vfprintf+0xf6>
 5ac:	f7 01       	movw	r30, r14
 5ae:	93 fd       	sbrc	r25, 3
 5b0:	85 91       	lpm	r24, Z+
 5b2:	93 ff       	sbrs	r25, 3
 5b4:	81 91       	ld	r24, Z+
 5b6:	7f 01       	movw	r14, r30
 5b8:	81 11       	cpse	r24, r1
 5ba:	b3 cf       	rjmp	.-154    	; 0x522 <vfprintf+0x5c>
 5bc:	98 2f       	mov	r25, r24
 5be:	9f 7d       	andi	r25, 0xDF	; 223
 5c0:	95 54       	subi	r25, 0x45	; 69
 5c2:	93 30       	cpi	r25, 0x03	; 3
 5c4:	28 f4       	brcc	.+10     	; 0x5d0 <vfprintf+0x10a>
 5c6:	0c 5f       	subi	r16, 0xFC	; 252
 5c8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ca:	9f e3       	ldi	r25, 0x3F	; 63
 5cc:	99 83       	std	Y+1, r25	; 0x01
 5ce:	0d c0       	rjmp	.+26     	; 0x5ea <vfprintf+0x124>
 5d0:	83 36       	cpi	r24, 0x63	; 99
 5d2:	31 f0       	breq	.+12     	; 0x5e0 <vfprintf+0x11a>
 5d4:	83 37       	cpi	r24, 0x73	; 115
 5d6:	71 f0       	breq	.+28     	; 0x5f4 <vfprintf+0x12e>
 5d8:	83 35       	cpi	r24, 0x53	; 83
 5da:	09 f0       	breq	.+2      	; 0x5de <vfprintf+0x118>
 5dc:	59 c0       	rjmp	.+178    	; 0x690 <vfprintf+0x1ca>
 5de:	21 c0       	rjmp	.+66     	; 0x622 <vfprintf+0x15c>
 5e0:	f8 01       	movw	r30, r16
 5e2:	80 81       	ld	r24, Z
 5e4:	89 83       	std	Y+1, r24	; 0x01
 5e6:	0e 5f       	subi	r16, 0xFE	; 254
 5e8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ea:	88 24       	eor	r8, r8
 5ec:	83 94       	inc	r8
 5ee:	91 2c       	mov	r9, r1
 5f0:	53 01       	movw	r10, r6
 5f2:	13 c0       	rjmp	.+38     	; 0x61a <vfprintf+0x154>
 5f4:	28 01       	movw	r4, r16
 5f6:	f2 e0       	ldi	r31, 0x02	; 2
 5f8:	4f 0e       	add	r4, r31
 5fa:	51 1c       	adc	r5, r1
 5fc:	f8 01       	movw	r30, r16
 5fe:	a0 80       	ld	r10, Z
 600:	b1 80       	ldd	r11, Z+1	; 0x01
 602:	36 fe       	sbrs	r3, 6
 604:	03 c0       	rjmp	.+6      	; 0x60c <vfprintf+0x146>
 606:	69 2d       	mov	r22, r9
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	02 c0       	rjmp	.+4      	; 0x610 <vfprintf+0x14a>
 60c:	6f ef       	ldi	r22, 0xFF	; 255
 60e:	7f ef       	ldi	r23, 0xFF	; 255
 610:	c5 01       	movw	r24, r10
 612:	0e 94 4f 04 	call	0x89e	; 0x89e <strnlen>
 616:	4c 01       	movw	r8, r24
 618:	82 01       	movw	r16, r4
 61a:	f3 2d       	mov	r31, r3
 61c:	ff 77       	andi	r31, 0x7F	; 127
 61e:	3f 2e       	mov	r3, r31
 620:	16 c0       	rjmp	.+44     	; 0x64e <vfprintf+0x188>
 622:	28 01       	movw	r4, r16
 624:	22 e0       	ldi	r18, 0x02	; 2
 626:	42 0e       	add	r4, r18
 628:	51 1c       	adc	r5, r1
 62a:	f8 01       	movw	r30, r16
 62c:	a0 80       	ld	r10, Z
 62e:	b1 80       	ldd	r11, Z+1	; 0x01
 630:	36 fe       	sbrs	r3, 6
 632:	03 c0       	rjmp	.+6      	; 0x63a <vfprintf+0x174>
 634:	69 2d       	mov	r22, r9
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <vfprintf+0x178>
 63a:	6f ef       	ldi	r22, 0xFF	; 255
 63c:	7f ef       	ldi	r23, 0xFF	; 255
 63e:	c5 01       	movw	r24, r10
 640:	0e 94 44 04 	call	0x888	; 0x888 <strnlen_P>
 644:	4c 01       	movw	r8, r24
 646:	f3 2d       	mov	r31, r3
 648:	f0 68       	ori	r31, 0x80	; 128
 64a:	3f 2e       	mov	r3, r31
 64c:	82 01       	movw	r16, r4
 64e:	33 fc       	sbrc	r3, 3
 650:	1b c0       	rjmp	.+54     	; 0x688 <vfprintf+0x1c2>
 652:	82 2d       	mov	r24, r2
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	88 16       	cp	r8, r24
 658:	99 06       	cpc	r9, r25
 65a:	b0 f4       	brcc	.+44     	; 0x688 <vfprintf+0x1c2>
 65c:	b6 01       	movw	r22, r12
 65e:	80 e2       	ldi	r24, 0x20	; 32
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 666:	2a 94       	dec	r2
 668:	f4 cf       	rjmp	.-24     	; 0x652 <vfprintf+0x18c>
 66a:	f5 01       	movw	r30, r10
 66c:	37 fc       	sbrc	r3, 7
 66e:	85 91       	lpm	r24, Z+
 670:	37 fe       	sbrs	r3, 7
 672:	81 91       	ld	r24, Z+
 674:	5f 01       	movw	r10, r30
 676:	b6 01       	movw	r22, r12
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 67e:	21 10       	cpse	r2, r1
 680:	2a 94       	dec	r2
 682:	21 e0       	ldi	r18, 0x01	; 1
 684:	82 1a       	sub	r8, r18
 686:	91 08       	sbc	r9, r1
 688:	81 14       	cp	r8, r1
 68a:	91 04       	cpc	r9, r1
 68c:	71 f7       	brne	.-36     	; 0x66a <vfprintf+0x1a4>
 68e:	e8 c0       	rjmp	.+464    	; 0x860 <vfprintf+0x39a>
 690:	84 36       	cpi	r24, 0x64	; 100
 692:	11 f0       	breq	.+4      	; 0x698 <vfprintf+0x1d2>
 694:	89 36       	cpi	r24, 0x69	; 105
 696:	41 f5       	brne	.+80     	; 0x6e8 <vfprintf+0x222>
 698:	f8 01       	movw	r30, r16
 69a:	37 fe       	sbrs	r3, 7
 69c:	07 c0       	rjmp	.+14     	; 0x6ac <vfprintf+0x1e6>
 69e:	60 81       	ld	r22, Z
 6a0:	71 81       	ldd	r23, Z+1	; 0x01
 6a2:	82 81       	ldd	r24, Z+2	; 0x02
 6a4:	93 81       	ldd	r25, Z+3	; 0x03
 6a6:	0c 5f       	subi	r16, 0xFC	; 252
 6a8:	1f 4f       	sbci	r17, 0xFF	; 255
 6aa:	08 c0       	rjmp	.+16     	; 0x6bc <vfprintf+0x1f6>
 6ac:	60 81       	ld	r22, Z
 6ae:	71 81       	ldd	r23, Z+1	; 0x01
 6b0:	07 2e       	mov	r0, r23
 6b2:	00 0c       	add	r0, r0
 6b4:	88 0b       	sbc	r24, r24
 6b6:	99 0b       	sbc	r25, r25
 6b8:	0e 5f       	subi	r16, 0xFE	; 254
 6ba:	1f 4f       	sbci	r17, 0xFF	; 255
 6bc:	f3 2d       	mov	r31, r3
 6be:	ff 76       	andi	r31, 0x6F	; 111
 6c0:	3f 2e       	mov	r3, r31
 6c2:	97 ff       	sbrs	r25, 7
 6c4:	09 c0       	rjmp	.+18     	; 0x6d8 <vfprintf+0x212>
 6c6:	90 95       	com	r25
 6c8:	80 95       	com	r24
 6ca:	70 95       	com	r23
 6cc:	61 95       	neg	r22
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	8f 4f       	sbci	r24, 0xFF	; 255
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	f0 68       	ori	r31, 0x80	; 128
 6d6:	3f 2e       	mov	r3, r31
 6d8:	2a e0       	ldi	r18, 0x0A	; 10
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	a3 01       	movw	r20, r6
 6de:	0e 94 96 04 	call	0x92c	; 0x92c <__ultoa_invert>
 6e2:	88 2e       	mov	r8, r24
 6e4:	86 18       	sub	r8, r6
 6e6:	45 c0       	rjmp	.+138    	; 0x772 <vfprintf+0x2ac>
 6e8:	85 37       	cpi	r24, 0x75	; 117
 6ea:	31 f4       	brne	.+12     	; 0x6f8 <vfprintf+0x232>
 6ec:	23 2d       	mov	r18, r3
 6ee:	2f 7e       	andi	r18, 0xEF	; 239
 6f0:	b2 2e       	mov	r11, r18
 6f2:	2a e0       	ldi	r18, 0x0A	; 10
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	25 c0       	rjmp	.+74     	; 0x742 <vfprintf+0x27c>
 6f8:	93 2d       	mov	r25, r3
 6fa:	99 7f       	andi	r25, 0xF9	; 249
 6fc:	b9 2e       	mov	r11, r25
 6fe:	8f 36       	cpi	r24, 0x6F	; 111
 700:	c1 f0       	breq	.+48     	; 0x732 <vfprintf+0x26c>
 702:	18 f4       	brcc	.+6      	; 0x70a <vfprintf+0x244>
 704:	88 35       	cpi	r24, 0x58	; 88
 706:	79 f0       	breq	.+30     	; 0x726 <vfprintf+0x260>
 708:	b5 c0       	rjmp	.+362    	; 0x874 <vfprintf+0x3ae>
 70a:	80 37       	cpi	r24, 0x70	; 112
 70c:	19 f0       	breq	.+6      	; 0x714 <vfprintf+0x24e>
 70e:	88 37       	cpi	r24, 0x78	; 120
 710:	21 f0       	breq	.+8      	; 0x71a <vfprintf+0x254>
 712:	b0 c0       	rjmp	.+352    	; 0x874 <vfprintf+0x3ae>
 714:	e9 2f       	mov	r30, r25
 716:	e0 61       	ori	r30, 0x10	; 16
 718:	be 2e       	mov	r11, r30
 71a:	b4 fe       	sbrs	r11, 4
 71c:	0d c0       	rjmp	.+26     	; 0x738 <vfprintf+0x272>
 71e:	fb 2d       	mov	r31, r11
 720:	f4 60       	ori	r31, 0x04	; 4
 722:	bf 2e       	mov	r11, r31
 724:	09 c0       	rjmp	.+18     	; 0x738 <vfprintf+0x272>
 726:	34 fe       	sbrs	r3, 4
 728:	0a c0       	rjmp	.+20     	; 0x73e <vfprintf+0x278>
 72a:	29 2f       	mov	r18, r25
 72c:	26 60       	ori	r18, 0x06	; 6
 72e:	b2 2e       	mov	r11, r18
 730:	06 c0       	rjmp	.+12     	; 0x73e <vfprintf+0x278>
 732:	28 e0       	ldi	r18, 0x08	; 8
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	05 c0       	rjmp	.+10     	; 0x742 <vfprintf+0x27c>
 738:	20 e1       	ldi	r18, 0x10	; 16
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	02 c0       	rjmp	.+4      	; 0x742 <vfprintf+0x27c>
 73e:	20 e1       	ldi	r18, 0x10	; 16
 740:	32 e0       	ldi	r19, 0x02	; 2
 742:	f8 01       	movw	r30, r16
 744:	b7 fe       	sbrs	r11, 7
 746:	07 c0       	rjmp	.+14     	; 0x756 <vfprintf+0x290>
 748:	60 81       	ld	r22, Z
 74a:	71 81       	ldd	r23, Z+1	; 0x01
 74c:	82 81       	ldd	r24, Z+2	; 0x02
 74e:	93 81       	ldd	r25, Z+3	; 0x03
 750:	0c 5f       	subi	r16, 0xFC	; 252
 752:	1f 4f       	sbci	r17, 0xFF	; 255
 754:	06 c0       	rjmp	.+12     	; 0x762 <vfprintf+0x29c>
 756:	60 81       	ld	r22, Z
 758:	71 81       	ldd	r23, Z+1	; 0x01
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0e 5f       	subi	r16, 0xFE	; 254
 760:	1f 4f       	sbci	r17, 0xFF	; 255
 762:	a3 01       	movw	r20, r6
 764:	0e 94 96 04 	call	0x92c	; 0x92c <__ultoa_invert>
 768:	88 2e       	mov	r8, r24
 76a:	86 18       	sub	r8, r6
 76c:	fb 2d       	mov	r31, r11
 76e:	ff 77       	andi	r31, 0x7F	; 127
 770:	3f 2e       	mov	r3, r31
 772:	36 fe       	sbrs	r3, 6
 774:	0d c0       	rjmp	.+26     	; 0x790 <vfprintf+0x2ca>
 776:	23 2d       	mov	r18, r3
 778:	2e 7f       	andi	r18, 0xFE	; 254
 77a:	a2 2e       	mov	r10, r18
 77c:	89 14       	cp	r8, r9
 77e:	58 f4       	brcc	.+22     	; 0x796 <vfprintf+0x2d0>
 780:	34 fe       	sbrs	r3, 4
 782:	0b c0       	rjmp	.+22     	; 0x79a <vfprintf+0x2d4>
 784:	32 fc       	sbrc	r3, 2
 786:	09 c0       	rjmp	.+18     	; 0x79a <vfprintf+0x2d4>
 788:	83 2d       	mov	r24, r3
 78a:	8e 7e       	andi	r24, 0xEE	; 238
 78c:	a8 2e       	mov	r10, r24
 78e:	05 c0       	rjmp	.+10     	; 0x79a <vfprintf+0x2d4>
 790:	b8 2c       	mov	r11, r8
 792:	a3 2c       	mov	r10, r3
 794:	03 c0       	rjmp	.+6      	; 0x79c <vfprintf+0x2d6>
 796:	b8 2c       	mov	r11, r8
 798:	01 c0       	rjmp	.+2      	; 0x79c <vfprintf+0x2d6>
 79a:	b9 2c       	mov	r11, r9
 79c:	a4 fe       	sbrs	r10, 4
 79e:	0f c0       	rjmp	.+30     	; 0x7be <vfprintf+0x2f8>
 7a0:	fe 01       	movw	r30, r28
 7a2:	e8 0d       	add	r30, r8
 7a4:	f1 1d       	adc	r31, r1
 7a6:	80 81       	ld	r24, Z
 7a8:	80 33       	cpi	r24, 0x30	; 48
 7aa:	21 f4       	brne	.+8      	; 0x7b4 <vfprintf+0x2ee>
 7ac:	9a 2d       	mov	r25, r10
 7ae:	99 7e       	andi	r25, 0xE9	; 233
 7b0:	a9 2e       	mov	r10, r25
 7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <vfprintf+0x300>
 7b4:	a2 fe       	sbrs	r10, 2
 7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <vfprintf+0x2fe>
 7b8:	b3 94       	inc	r11
 7ba:	b3 94       	inc	r11
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <vfprintf+0x300>
 7be:	8a 2d       	mov	r24, r10
 7c0:	86 78       	andi	r24, 0x86	; 134
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <vfprintf+0x300>
 7c4:	b3 94       	inc	r11
 7c6:	a3 fc       	sbrc	r10, 3
 7c8:	11 c0       	rjmp	.+34     	; 0x7ec <vfprintf+0x326>
 7ca:	a0 fe       	sbrs	r10, 0
 7cc:	06 c0       	rjmp	.+12     	; 0x7da <vfprintf+0x314>
 7ce:	b2 14       	cp	r11, r2
 7d0:	88 f4       	brcc	.+34     	; 0x7f4 <vfprintf+0x32e>
 7d2:	28 0c       	add	r2, r8
 7d4:	92 2c       	mov	r9, r2
 7d6:	9b 18       	sub	r9, r11
 7d8:	0e c0       	rjmp	.+28     	; 0x7f6 <vfprintf+0x330>
 7da:	b2 14       	cp	r11, r2
 7dc:	60 f4       	brcc	.+24     	; 0x7f6 <vfprintf+0x330>
 7de:	b6 01       	movw	r22, r12
 7e0:	80 e2       	ldi	r24, 0x20	; 32
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 7e8:	b3 94       	inc	r11
 7ea:	f7 cf       	rjmp	.-18     	; 0x7da <vfprintf+0x314>
 7ec:	b2 14       	cp	r11, r2
 7ee:	18 f4       	brcc	.+6      	; 0x7f6 <vfprintf+0x330>
 7f0:	2b 18       	sub	r2, r11
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <vfprintf+0x332>
 7f4:	98 2c       	mov	r9, r8
 7f6:	21 2c       	mov	r2, r1
 7f8:	a4 fe       	sbrs	r10, 4
 7fa:	10 c0       	rjmp	.+32     	; 0x81c <vfprintf+0x356>
 7fc:	b6 01       	movw	r22, r12
 7fe:	80 e3       	ldi	r24, 0x30	; 48
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 806:	a2 fe       	sbrs	r10, 2
 808:	17 c0       	rjmp	.+46     	; 0x838 <vfprintf+0x372>
 80a:	a1 fc       	sbrc	r10, 1
 80c:	03 c0       	rjmp	.+6      	; 0x814 <vfprintf+0x34e>
 80e:	88 e7       	ldi	r24, 0x78	; 120
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	02 c0       	rjmp	.+4      	; 0x818 <vfprintf+0x352>
 814:	88 e5       	ldi	r24, 0x58	; 88
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	b6 01       	movw	r22, r12
 81a:	0c c0       	rjmp	.+24     	; 0x834 <vfprintf+0x36e>
 81c:	8a 2d       	mov	r24, r10
 81e:	86 78       	andi	r24, 0x86	; 134
 820:	59 f0       	breq	.+22     	; 0x838 <vfprintf+0x372>
 822:	a1 fe       	sbrs	r10, 1
 824:	02 c0       	rjmp	.+4      	; 0x82a <vfprintf+0x364>
 826:	8b e2       	ldi	r24, 0x2B	; 43
 828:	01 c0       	rjmp	.+2      	; 0x82c <vfprintf+0x366>
 82a:	80 e2       	ldi	r24, 0x20	; 32
 82c:	a7 fc       	sbrc	r10, 7
 82e:	8d e2       	ldi	r24, 0x2D	; 45
 830:	b6 01       	movw	r22, r12
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 838:	89 14       	cp	r8, r9
 83a:	38 f4       	brcc	.+14     	; 0x84a <vfprintf+0x384>
 83c:	b6 01       	movw	r22, r12
 83e:	80 e3       	ldi	r24, 0x30	; 48
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 846:	9a 94       	dec	r9
 848:	f7 cf       	rjmp	.-18     	; 0x838 <vfprintf+0x372>
 84a:	8a 94       	dec	r8
 84c:	f3 01       	movw	r30, r6
 84e:	e8 0d       	add	r30, r8
 850:	f1 1d       	adc	r31, r1
 852:	80 81       	ld	r24, Z
 854:	b6 01       	movw	r22, r12
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 85c:	81 10       	cpse	r8, r1
 85e:	f5 cf       	rjmp	.-22     	; 0x84a <vfprintf+0x384>
 860:	22 20       	and	r2, r2
 862:	09 f4       	brne	.+2      	; 0x866 <vfprintf+0x3a0>
 864:	42 ce       	rjmp	.-892    	; 0x4ea <vfprintf+0x24>
 866:	b6 01       	movw	r22, r12
 868:	80 e2       	ldi	r24, 0x20	; 32
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 870:	2a 94       	dec	r2
 872:	f6 cf       	rjmp	.-20     	; 0x860 <vfprintf+0x39a>
 874:	f6 01       	movw	r30, r12
 876:	86 81       	ldd	r24, Z+6	; 0x06
 878:	97 81       	ldd	r25, Z+7	; 0x07
 87a:	02 c0       	rjmp	.+4      	; 0x880 <vfprintf+0x3ba>
 87c:	8f ef       	ldi	r24, 0xFF	; 255
 87e:	9f ef       	ldi	r25, 0xFF	; 255
 880:	2b 96       	adiw	r28, 0x0b	; 11
 882:	e2 e1       	ldi	r30, 0x12	; 18
 884:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__epilogue_restores__>

00000888 <strnlen_P>:
 888:	fc 01       	movw	r30, r24
 88a:	05 90       	lpm	r0, Z+
 88c:	61 50       	subi	r22, 0x01	; 1
 88e:	70 40       	sbci	r23, 0x00	; 0
 890:	01 10       	cpse	r0, r1
 892:	d8 f7       	brcc	.-10     	; 0x88a <strnlen_P+0x2>
 894:	80 95       	com	r24
 896:	90 95       	com	r25
 898:	8e 0f       	add	r24, r30
 89a:	9f 1f       	adc	r25, r31
 89c:	08 95       	ret

0000089e <strnlen>:
 89e:	fc 01       	movw	r30, r24
 8a0:	61 50       	subi	r22, 0x01	; 1
 8a2:	70 40       	sbci	r23, 0x00	; 0
 8a4:	01 90       	ld	r0, Z+
 8a6:	01 10       	cpse	r0, r1
 8a8:	d8 f7       	brcc	.-10     	; 0x8a0 <strnlen+0x2>
 8aa:	80 95       	com	r24
 8ac:	90 95       	com	r25
 8ae:	8e 0f       	add	r24, r30
 8b0:	9f 1f       	adc	r25, r31
 8b2:	08 95       	ret

000008b4 <fputc>:
 8b4:	0f 93       	push	r16
 8b6:	1f 93       	push	r17
 8b8:	cf 93       	push	r28
 8ba:	df 93       	push	r29
 8bc:	fb 01       	movw	r30, r22
 8be:	23 81       	ldd	r18, Z+3	; 0x03
 8c0:	21 fd       	sbrc	r18, 1
 8c2:	03 c0       	rjmp	.+6      	; 0x8ca <fputc+0x16>
 8c4:	8f ef       	ldi	r24, 0xFF	; 255
 8c6:	9f ef       	ldi	r25, 0xFF	; 255
 8c8:	2c c0       	rjmp	.+88     	; 0x922 <__stack+0x23>
 8ca:	22 ff       	sbrs	r18, 2
 8cc:	16 c0       	rjmp	.+44     	; 0x8fa <fputc+0x46>
 8ce:	46 81       	ldd	r20, Z+6	; 0x06
 8d0:	57 81       	ldd	r21, Z+7	; 0x07
 8d2:	24 81       	ldd	r18, Z+4	; 0x04
 8d4:	35 81       	ldd	r19, Z+5	; 0x05
 8d6:	42 17       	cp	r20, r18
 8d8:	53 07       	cpc	r21, r19
 8da:	44 f4       	brge	.+16     	; 0x8ec <fputc+0x38>
 8dc:	a0 81       	ld	r26, Z
 8de:	b1 81       	ldd	r27, Z+1	; 0x01
 8e0:	9d 01       	movw	r18, r26
 8e2:	2f 5f       	subi	r18, 0xFF	; 255
 8e4:	3f 4f       	sbci	r19, 0xFF	; 255
 8e6:	31 83       	std	Z+1, r19	; 0x01
 8e8:	20 83       	st	Z, r18
 8ea:	8c 93       	st	X, r24
 8ec:	26 81       	ldd	r18, Z+6	; 0x06
 8ee:	37 81       	ldd	r19, Z+7	; 0x07
 8f0:	2f 5f       	subi	r18, 0xFF	; 255
 8f2:	3f 4f       	sbci	r19, 0xFF	; 255
 8f4:	37 83       	std	Z+7, r19	; 0x07
 8f6:	26 83       	std	Z+6, r18	; 0x06
 8f8:	14 c0       	rjmp	.+40     	; 0x922 <__stack+0x23>
 8fa:	8b 01       	movw	r16, r22
 8fc:	ec 01       	movw	r28, r24
 8fe:	fb 01       	movw	r30, r22
 900:	00 84       	ldd	r0, Z+8	; 0x08
 902:	f1 85       	ldd	r31, Z+9	; 0x09
 904:	e0 2d       	mov	r30, r0
 906:	09 95       	icall
 908:	89 2b       	or	r24, r25
 90a:	e1 f6       	brne	.-72     	; 0x8c4 <fputc+0x10>
 90c:	d8 01       	movw	r26, r16
 90e:	16 96       	adiw	r26, 0x06	; 6
 910:	8d 91       	ld	r24, X+
 912:	9c 91       	ld	r25, X
 914:	17 97       	sbiw	r26, 0x07	; 7
 916:	01 96       	adiw	r24, 0x01	; 1
 918:	17 96       	adiw	r26, 0x07	; 7
 91a:	9c 93       	st	X, r25
 91c:	8e 93       	st	-X, r24
 91e:	16 97       	sbiw	r26, 0x06	; 6
 920:	ce 01       	movw	r24, r28
 922:	df 91       	pop	r29
 924:	cf 91       	pop	r28
 926:	1f 91       	pop	r17
 928:	0f 91       	pop	r16
 92a:	08 95       	ret

0000092c <__ultoa_invert>:
 92c:	fa 01       	movw	r30, r20
 92e:	aa 27       	eor	r26, r26
 930:	28 30       	cpi	r18, 0x08	; 8
 932:	51 f1       	breq	.+84     	; 0x988 <__ultoa_invert+0x5c>
 934:	20 31       	cpi	r18, 0x10	; 16
 936:	81 f1       	breq	.+96     	; 0x998 <__ultoa_invert+0x6c>
 938:	e8 94       	clt
 93a:	6f 93       	push	r22
 93c:	6e 7f       	andi	r22, 0xFE	; 254
 93e:	6e 5f       	subi	r22, 0xFE	; 254
 940:	7f 4f       	sbci	r23, 0xFF	; 255
 942:	8f 4f       	sbci	r24, 0xFF	; 255
 944:	9f 4f       	sbci	r25, 0xFF	; 255
 946:	af 4f       	sbci	r26, 0xFF	; 255
 948:	b1 e0       	ldi	r27, 0x01	; 1
 94a:	3e d0       	rcall	.+124    	; 0x9c8 <__ultoa_invert+0x9c>
 94c:	b4 e0       	ldi	r27, 0x04	; 4
 94e:	3c d0       	rcall	.+120    	; 0x9c8 <__ultoa_invert+0x9c>
 950:	67 0f       	add	r22, r23
 952:	78 1f       	adc	r23, r24
 954:	89 1f       	adc	r24, r25
 956:	9a 1f       	adc	r25, r26
 958:	a1 1d       	adc	r26, r1
 95a:	68 0f       	add	r22, r24
 95c:	79 1f       	adc	r23, r25
 95e:	8a 1f       	adc	r24, r26
 960:	91 1d       	adc	r25, r1
 962:	a1 1d       	adc	r26, r1
 964:	6a 0f       	add	r22, r26
 966:	71 1d       	adc	r23, r1
 968:	81 1d       	adc	r24, r1
 96a:	91 1d       	adc	r25, r1
 96c:	a1 1d       	adc	r26, r1
 96e:	20 d0       	rcall	.+64     	; 0x9b0 <__ultoa_invert+0x84>
 970:	09 f4       	brne	.+2      	; 0x974 <__ultoa_invert+0x48>
 972:	68 94       	set
 974:	3f 91       	pop	r19
 976:	2a e0       	ldi	r18, 0x0A	; 10
 978:	26 9f       	mul	r18, r22
 97a:	11 24       	eor	r1, r1
 97c:	30 19       	sub	r19, r0
 97e:	30 5d       	subi	r19, 0xD0	; 208
 980:	31 93       	st	Z+, r19
 982:	de f6       	brtc	.-74     	; 0x93a <__ultoa_invert+0xe>
 984:	cf 01       	movw	r24, r30
 986:	08 95       	ret
 988:	46 2f       	mov	r20, r22
 98a:	47 70       	andi	r20, 0x07	; 7
 98c:	40 5d       	subi	r20, 0xD0	; 208
 98e:	41 93       	st	Z+, r20
 990:	b3 e0       	ldi	r27, 0x03	; 3
 992:	0f d0       	rcall	.+30     	; 0x9b2 <__ultoa_invert+0x86>
 994:	c9 f7       	brne	.-14     	; 0x988 <__ultoa_invert+0x5c>
 996:	f6 cf       	rjmp	.-20     	; 0x984 <__ultoa_invert+0x58>
 998:	46 2f       	mov	r20, r22
 99a:	4f 70       	andi	r20, 0x0F	; 15
 99c:	40 5d       	subi	r20, 0xD0	; 208
 99e:	4a 33       	cpi	r20, 0x3A	; 58
 9a0:	18 f0       	brcs	.+6      	; 0x9a8 <__ultoa_invert+0x7c>
 9a2:	49 5d       	subi	r20, 0xD9	; 217
 9a4:	31 fd       	sbrc	r19, 1
 9a6:	40 52       	subi	r20, 0x20	; 32
 9a8:	41 93       	st	Z+, r20
 9aa:	02 d0       	rcall	.+4      	; 0x9b0 <__ultoa_invert+0x84>
 9ac:	a9 f7       	brne	.-22     	; 0x998 <__ultoa_invert+0x6c>
 9ae:	ea cf       	rjmp	.-44     	; 0x984 <__ultoa_invert+0x58>
 9b0:	b4 e0       	ldi	r27, 0x04	; 4
 9b2:	a6 95       	lsr	r26
 9b4:	97 95       	ror	r25
 9b6:	87 95       	ror	r24
 9b8:	77 95       	ror	r23
 9ba:	67 95       	ror	r22
 9bc:	ba 95       	dec	r27
 9be:	c9 f7       	brne	.-14     	; 0x9b2 <__ultoa_invert+0x86>
 9c0:	00 97       	sbiw	r24, 0x00	; 0
 9c2:	61 05       	cpc	r22, r1
 9c4:	71 05       	cpc	r23, r1
 9c6:	08 95       	ret
 9c8:	9b 01       	movw	r18, r22
 9ca:	ac 01       	movw	r20, r24
 9cc:	0a 2e       	mov	r0, r26
 9ce:	06 94       	lsr	r0
 9d0:	57 95       	ror	r21
 9d2:	47 95       	ror	r20
 9d4:	37 95       	ror	r19
 9d6:	27 95       	ror	r18
 9d8:	ba 95       	dec	r27
 9da:	c9 f7       	brne	.-14     	; 0x9ce <__ultoa_invert+0xa2>
 9dc:	62 0f       	add	r22, r18
 9de:	73 1f       	adc	r23, r19
 9e0:	84 1f       	adc	r24, r20
 9e2:	95 1f       	adc	r25, r21
 9e4:	a0 1d       	adc	r26, r0
 9e6:	08 95       	ret

000009e8 <__prologue_saves__>:
 9e8:	2f 92       	push	r2
 9ea:	3f 92       	push	r3
 9ec:	4f 92       	push	r4
 9ee:	5f 92       	push	r5
 9f0:	6f 92       	push	r6
 9f2:	7f 92       	push	r7
 9f4:	8f 92       	push	r8
 9f6:	9f 92       	push	r9
 9f8:	af 92       	push	r10
 9fa:	bf 92       	push	r11
 9fc:	cf 92       	push	r12
 9fe:	df 92       	push	r13
 a00:	ef 92       	push	r14
 a02:	ff 92       	push	r15
 a04:	0f 93       	push	r16
 a06:	1f 93       	push	r17
 a08:	cf 93       	push	r28
 a0a:	df 93       	push	r29
 a0c:	cd b7       	in	r28, 0x3d	; 61
 a0e:	de b7       	in	r29, 0x3e	; 62
 a10:	ca 1b       	sub	r28, r26
 a12:	db 0b       	sbc	r29, r27
 a14:	0f b6       	in	r0, 0x3f	; 63
 a16:	f8 94       	cli
 a18:	de bf       	out	0x3e, r29	; 62
 a1a:	0f be       	out	0x3f, r0	; 63
 a1c:	cd bf       	out	0x3d, r28	; 61
 a1e:	09 94       	ijmp

00000a20 <__epilogue_restores__>:
 a20:	2a 88       	ldd	r2, Y+18	; 0x12
 a22:	39 88       	ldd	r3, Y+17	; 0x11
 a24:	48 88       	ldd	r4, Y+16	; 0x10
 a26:	5f 84       	ldd	r5, Y+15	; 0x0f
 a28:	6e 84       	ldd	r6, Y+14	; 0x0e
 a2a:	7d 84       	ldd	r7, Y+13	; 0x0d
 a2c:	8c 84       	ldd	r8, Y+12	; 0x0c
 a2e:	9b 84       	ldd	r9, Y+11	; 0x0b
 a30:	aa 84       	ldd	r10, Y+10	; 0x0a
 a32:	b9 84       	ldd	r11, Y+9	; 0x09
 a34:	c8 84       	ldd	r12, Y+8	; 0x08
 a36:	df 80       	ldd	r13, Y+7	; 0x07
 a38:	ee 80       	ldd	r14, Y+6	; 0x06
 a3a:	fd 80       	ldd	r15, Y+5	; 0x05
 a3c:	0c 81       	ldd	r16, Y+4	; 0x04
 a3e:	1b 81       	ldd	r17, Y+3	; 0x03
 a40:	aa 81       	ldd	r26, Y+2	; 0x02
 a42:	b9 81       	ldd	r27, Y+1	; 0x01
 a44:	ce 0f       	add	r28, r30
 a46:	d1 1d       	adc	r29, r1
 a48:	0f b6       	in	r0, 0x3f	; 63
 a4a:	f8 94       	cli
 a4c:	de bf       	out	0x3e, r29	; 62
 a4e:	0f be       	out	0x3f, r0	; 63
 a50:	cd bf       	out	0x3d, r28	; 61
 a52:	ed 01       	movw	r28, r26
 a54:	08 95       	ret

00000a56 <_exit>:
 a56:	f8 94       	cli

00000a58 <__stop_program>:
 a58:	ff cf       	rjmp	.-2      	; 0xa58 <__stop_program>
