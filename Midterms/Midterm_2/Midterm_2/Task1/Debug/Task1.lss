
Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00000b3a  00000bce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080020c  0080020c  00000cda  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001627  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c52  00000000  00000000  0000248f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d6  00000000  00000000  000030e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  00003ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000690  00000000  00000000  00003d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b0f  00000000  00000000  000043b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004ebf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	12 e0       	ldi	r17, 0x02	; 2
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e3       	ldi	r30, 0x3A	; 58
  c8:	fb e0       	ldi	r31, 0x0B	; 11
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 30       	cpi	r26, 0x0C	; 12
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	22 e0       	ldi	r18, 0x02	; 2
  d8:	ac e0       	ldi	r26, 0x0C	; 12
  da:	b2 e0       	ldi	r27, 0x02	; 2
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a4 31       	cpi	r26, 0x14	; 20
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  ea:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <i2c_init>:
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
  f2:	88 e4       	ldi	r24, 0x48	; 72
  f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  f8:	08 95       	ret

000000fa <i2c_start>:
  fa:	ec eb       	ldi	r30, 0xBC	; 188
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	10 82       	st	Z, r1
 100:	94 ea       	ldi	r25, 0xA4	; 164
 102:	90 83       	st	Z, r25
 104:	90 81       	ld	r25, Z
 106:	99 23       	and	r25, r25
 108:	ec f7       	brge	.-6      	; 0x104 <i2c_start+0xa>
 10a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 10e:	98 7f       	andi	r25, 0xF8	; 248
 110:	98 30       	cpi	r25, 0x08	; 8
 112:	a1 f4       	brne	.+40     	; 0x13c <i2c_start+0x42>
 114:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 118:	84 e8       	ldi	r24, 0x84	; 132
 11a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 11e:	ec eb       	ldi	r30, 0xBC	; 188
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 23       	and	r24, r24
 126:	ec f7       	brge	.-6      	; 0x122 <i2c_start+0x28>
 128:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 12c:	98 7f       	andi	r25, 0xF8	; 248
 12e:	98 31       	cpi	r25, 0x18	; 24
 130:	39 f0       	breq	.+14     	; 0x140 <i2c_start+0x46>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 34       	cpi	r25, 0x40	; 64
 136:	29 f4       	brne	.+10     	; 0x142 <i2c_start+0x48>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	08 95       	ret
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 95       	ret

00000144 <i2c_write>:
 144:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 148:	84 e8       	ldi	r24, 0x84	; 132
 14a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 14e:	ec eb       	ldi	r30, 0xBC	; 188
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	88 23       	and	r24, r24
 156:	ec f7       	brge	.-6      	; 0x152 <i2c_write+0xe>
 158:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 15c:	98 7f       	andi	r25, 0xF8	; 248
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	98 32       	cpi	r25, 0x28	; 40
 162:	09 f4       	brne	.+2      	; 0x166 <i2c_write+0x22>
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	08 95       	ret

00000168 <i2c_read_ack>:
 168:	84 ec       	ldi	r24, 0xC4	; 196
 16a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 16e:	ec eb       	ldi	r30, 0xBC	; 188
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	88 23       	and	r24, r24
 176:	ec f7       	brge	.-6      	; 0x172 <i2c_read_ack+0xa>
 178:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 17c:	08 95       	ret

0000017e <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 17e:	84 e9       	ldi	r24, 0x94	; 148
 180:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 184:	08 95       	ret

00000186 <usart_init>:
void uart_puts(char *s){
	while(*s){
		uart_putc(*s);
		s++;
	}
}
 186:	88 e0       	ldi	r24, 0x08	; 8
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 18e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 192:	88 e1       	ldi	r24, 0x18	; 24
 194:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 198:	86 e0       	ldi	r24, 0x06	; 6
 19a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 19e:	08 95       	ret

000001a0 <init_APDS9960>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	82 e5       	ldi	r24, 0x52	; 82
 1a4:	97 e0       	ldi	r25, 0x07	; 7
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <init_APDS9960+0x6>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <init_APDS9960+0x10>
 1b0:	00 00       	nop

void init_APDS9960(void){
	_delay_ms(150);										/* Power up time >100ms */
	i2c_start(APDS9960_WRITE); //
 1b2:	82 e7       	ldi	r24, 0x72	; 114
 1b4:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
	i2c_write(APDS9960_ENABLE); // 
 1b8:	80 e8       	ldi	r24, 0x80	; 128
 1ba:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_write>
	i2c_write(0x00); //Turn off all features
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_write>
	i2c_stop();
 1c4:	0e 94 bf 00 	call	0x17e	; 0x17e <i2c_stop>

	i2c_start(APDS9960_WRITE);
 1c8:	82 e7       	ldi	r24, 0x72	; 114
 1ca:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
	i2c_write(APDS9960_ATIME);
 1ce:	81 e8       	ldi	r24, 0x81	; 129
 1d0:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_write>
	i2c_write(DEFAULT_ATIME); // Set default integration time
 1d4:	8b ed       	ldi	r24, 0xDB	; 219
 1d6:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_write>
	i2c_stop();
 1da:	0e 94 bf 00 	call	0x17e	; 0x17e <i2c_stop>

	i2c_start(APDS9960_WRITE);
 1de:	82 e7       	ldi	r24, 0x72	; 114
 1e0:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
	i2c_write(APDS9960_CONTROL); //Set default gain value
 1e4:	8f e8       	ldi	r24, 0x8F	; 143
 1e6:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_write>
	i2c_write(DEFAULT_AGAIN);
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_write>
	i2c_stop();
 1f0:	0e 94 bf 00 	call	0x17e	; 0x17e <i2c_stop>
	
	i2c_start(APDS9960_WRITE);
 1f4:	82 e7       	ldi	r24, 0x72	; 114
 1f6:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
	i2c_write(APDS9960_ENABLE); 
 1fa:	80 e8       	ldi	r24, 0x80	; 128
 1fc:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_write>
	i2c_write((1 << POWER) | (1 << AMBIENT_LIGHT));		// 
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_write>
	i2c_stop();
 206:	0e 94 bf 00 	call	0x17e	; 0x17e <i2c_stop>
 20a:	08 95       	ret

0000020c <getreading>:

}

void getreading(void){
 20c:	cf 93       	push	r28

	i2c_start(APDS9960_WRITE);
 20e:	82 e7       	ldi	r24, 0x72	; 114
 210:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
	i2c_write(APDS9960_CDATAL); // set pointer
 214:	84 e9       	ldi	r24, 0x94	; 148
 216:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_write>
	i2c_stop();
 21a:	0e 94 bf 00 	call	0x17e	; 0x17e <i2c_stop>

	i2c_start(APDS9960_READ);
 21e:	83 e7       	ldi	r24, 0x73	; 115
 220:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
	Clear_data = (((int)i2c_read_ack()) | (int)i2c_read_ack() << 8);
 224:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_read_ack>
 228:	c8 2f       	mov	r28, r24
 22a:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_read_ack>
 22e:	2c 2f       	mov	r18, r28
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	38 2b       	or	r19, r24
 234:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <__data_end+0x1>
 238:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <__data_end>
	Red_data = (((int)i2c_read_ack()) | (int)i2c_read_ack() << 8);
 23c:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_read_ack>
 240:	c8 2f       	mov	r28, r24
 242:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_read_ack>
 246:	2c 2f       	mov	r18, r28
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	38 2b       	or	r19, r24
 24c:	30 93 11 02 	sts	0x0211, r19	; 0x800211 <Red_data+0x1>
 250:	20 93 10 02 	sts	0x0210, r18	; 0x800210 <Red_data>
	Green_data = (((int)i2c_read_ack()) | (int)i2c_read_ack() << 8);
 254:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_read_ack>
 258:	c8 2f       	mov	r28, r24
 25a:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_read_ack>
 25e:	2c 2f       	mov	r18, r28
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	38 2b       	or	r19, r24
 264:	30 93 0f 02 	sts	0x020F, r19	; 0x80020f <Green_data+0x1>
 268:	20 93 0e 02 	sts	0x020E, r18	; 0x80020e <Green_data>
	Blue_data = (((int)i2c_read_ack()) | (int)i2c_read_ack() << 8);
 26c:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_read_ack>
 270:	c8 2f       	mov	r28, r24
 272:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_read_ack>
 276:	2c 2f       	mov	r18, r28
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	38 2b       	or	r19, r24
 27c:	30 93 13 02 	sts	0x0213, r19	; 0x800213 <Blue_data+0x1>
 280:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <Blue_data>
		
	i2c_stop();
 284:	0e 94 bf 00 	call	0x17e	; 0x17e <i2c_stop>
}
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <main>:

int main(void){
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	c3 50       	subi	r28, 0x03	; 3
 296:	d1 40       	sbci	r29, 0x01	; 1
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	//init_uart(9600);
	usart_init(); //manually set for 115200 BAUD rate as formula has too much error
 2a2:	0e 94 c3 00 	call	0x186	; 0x186 <usart_init>
	i2c_init();
 2a6:	0e 94 79 00 	call	0xf2	; 0xf2 <i2c_init>
	init_APDS9960();
 2aa:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <init_APDS9960>
		getreading();


		USART_SendString("\n-----------------------\n");

		sprintf(buffer,"Clear = %d, ",Clear_data);
 2ae:	0f 2e       	mov	r0, r31
 2b0:	fa e1       	ldi	r31, 0x1A	; 26
 2b2:	8f 2e       	mov	r8, r31
 2b4:	f1 e0       	ldi	r31, 0x01	; 1
 2b6:	9f 2e       	mov	r9, r31
 2b8:	f0 2d       	mov	r31, r0
 2ba:	8e 01       	movw	r16, r28
 2bc:	0f 5f       	subi	r16, 0xFF	; 255
 2be:	1f 4f       	sbci	r17, 0xFF	; 255
		USART_SendString(buffer);
		
		sprintf(buffer,"Red = %d, ",Red_data);
 2c0:	0f 2e       	mov	r0, r31
 2c2:	f7 e2       	ldi	r31, 0x27	; 39
 2c4:	af 2e       	mov	r10, r31
 2c6:	f1 e0       	ldi	r31, 0x01	; 1
 2c8:	bf 2e       	mov	r11, r31
 2ca:	f0 2d       	mov	r31, r0
		USART_SendString(buffer);
		
		sprintf(buffer,"Green = %d, ",Green_data);
 2cc:	0f 2e       	mov	r0, r31
 2ce:	f2 e3       	ldi	r31, 0x32	; 50
 2d0:	cf 2e       	mov	r12, r31
 2d2:	f1 e0       	ldi	r31, 0x01	; 1
 2d4:	df 2e       	mov	r13, r31
 2d6:	f0 2d       	mov	r31, r0
		USART_SendString(buffer);
		
		sprintf(buffer,"Blue = %d\n",Blue_data);
 2d8:	0f 2e       	mov	r0, r31
 2da:	ff e3       	ldi	r31, 0x3F	; 63
 2dc:	6f 2e       	mov	r6, r31
 2de:	f1 e0       	ldi	r31, 0x01	; 1
 2e0:	7f 2e       	mov	r7, r31
 2e2:	f0 2d       	mov	r31, r0

		char thingSpeakSend[] = "AT+CIPSEND=119\r\n"; //saying we'll send more data than we actually will
		USART_SendString(thingSpeakSend);
		_delay_ms(1000);
		
		snprintf(thingSpeakUpdate, sizeof(thingSpeakUpdate), "GET https://api.thingspeak.com/update?api_key=P7JD9OICCNIR59PL&field1=%d&field2=%d&field3=%d&field4=%d\r\n", Clear_data, Red_data, Green_data, Blue_data);
 2e4:	0f 2e       	mov	r0, r31
 2e6:	fa e4       	ldi	r31, 0x4A	; 74
 2e8:	4f 2e       	mov	r4, r31
 2ea:	f1 e0       	ldi	r31, 0x01	; 1
 2ec:	5f 2e       	mov	r5, r31
 2ee:	f0 2d       	mov	r31, r0
 2f0:	0f 2e       	mov	r0, r31
 2f2:	f6 e9       	ldi	r31, 0x96	; 150
 2f4:	3f 2e       	mov	r3, r31
 2f6:	f0 2d       	mov	r31, r0
 2f8:	7e 01       	movw	r14, r28
 2fa:	25 e1       	ldi	r18, 0x15	; 21
 2fc:	e2 0e       	add	r14, r18
 2fe:	f1 1c       	adc	r15, r1
	usart_init(); //manually set for 115200 BAUD rate as formula has too much error
	i2c_init();
	init_APDS9960();
	
	while(1){
		getreading();
 300:	0e 94 06 01 	call	0x20c	; 0x20c <getreading>


		USART_SendString("\n-----------------------\n");
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	0e 94 72 02 	call	0x4e4	; 0x4e4 <USART_SendString>

		sprintf(buffer,"Clear = %d, ",Clear_data);
 30c:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <__data_end+0x1>
 310:	8f 93       	push	r24
 312:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 316:	8f 93       	push	r24
 318:	9f 92       	push	r9
 31a:	8f 92       	push	r8
 31c:	1f 93       	push	r17
 31e:	0f 93       	push	r16
 320:	0e 94 b1 02 	call	0x562	; 0x562 <sprintf>
		USART_SendString(buffer);
 324:	c8 01       	movw	r24, r16
 326:	0e 94 72 02 	call	0x4e4	; 0x4e4 <USART_SendString>
		
		sprintf(buffer,"Red = %d, ",Red_data);
 32a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Red_data+0x1>
 32e:	8f 93       	push	r24
 330:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <Red_data>
 334:	8f 93       	push	r24
 336:	bf 92       	push	r11
 338:	af 92       	push	r10
 33a:	1f 93       	push	r17
 33c:	0f 93       	push	r16
 33e:	0e 94 b1 02 	call	0x562	; 0x562 <sprintf>
		USART_SendString(buffer);
 342:	c8 01       	movw	r24, r16
 344:	0e 94 72 02 	call	0x4e4	; 0x4e4 <USART_SendString>
		
		sprintf(buffer,"Green = %d, ",Green_data);
 348:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <Green_data+0x1>
 34c:	8f 93       	push	r24
 34e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Green_data>
 352:	8f 93       	push	r24
 354:	df 92       	push	r13
 356:	cf 92       	push	r12
 358:	1f 93       	push	r17
 35a:	0f 93       	push	r16
 35c:	0e 94 b1 02 	call	0x562	; 0x562 <sprintf>
		USART_SendString(buffer);
 360:	c8 01       	movw	r24, r16
 362:	0e 94 72 02 	call	0x4e4	; 0x4e4 <USART_SendString>
		
		sprintf(buffer,"Blue = %d\n",Blue_data);
 366:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Blue_data+0x1>
 36a:	8f 93       	push	r24
 36c:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <Blue_data>
 370:	8f 93       	push	r24
 372:	7f 92       	push	r7
 374:	6f 92       	push	r6
 376:	1f 93       	push	r17
 378:	0f 93       	push	r16
 37a:	0e 94 b1 02 	call	0x562	; 0x562 <sprintf>
		USART_SendString(buffer);
 37e:	c8 01       	movw	r24, r16
 380:	0e 94 72 02 	call	0x4e4	; 0x4e4 <USART_SendString>

		USART_SendString("\n-----------------------\n");
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 72 02 	call	0x4e4	; 0x4e4 <USART_SendString>
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	93 ed       	ldi	r25, 0xD3	; 211
 390:	20 e3       	ldi	r18, 0x30	; 48
 392:	81 50       	subi	r24, 0x01	; 1
 394:	90 40       	sbci	r25, 0x00	; 0
 396:	20 40       	sbci	r18, 0x00	; 0
 398:	e1 f7       	brne	.-8      	; 0x392 <main+0x106>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <main+0x110>
 39c:	00 00       	nop
		_delay_ms(1000);

		
		char thingSpeakUpdate[150];

		char setMUX[] = "AT+CIPMUX=0\r\n"; //Repeating the steps ESPlorer used
 39e:	8e e0       	ldi	r24, 0x0E	; 14
 3a0:	e3 eb       	ldi	r30, 0xB3	; 179
 3a2:	f1 e0       	ldi	r31, 0x01	; 1
 3a4:	de 01       	movw	r26, r28
 3a6:	aa 50       	subi	r26, 0x0A	; 10
 3a8:	bf 4f       	sbci	r27, 0xFF	; 255
 3aa:	01 90       	ld	r0, Z+
 3ac:	0d 92       	st	X+, r0
 3ae:	8a 95       	dec	r24
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0x11e>
		USART_SendString(setMUX);
 3b2:	ce 01       	movw	r24, r28
 3b4:	8a 50       	subi	r24, 0x0A	; 10
 3b6:	9f 4f       	sbci	r25, 0xFF	; 255
 3b8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <USART_SendString>
 3bc:	8f ef       	ldi	r24, 0xFF	; 255
 3be:	93 ed       	ldi	r25, 0xD3	; 211
 3c0:	20 e3       	ldi	r18, 0x30	; 48
 3c2:	81 50       	subi	r24, 0x01	; 1
 3c4:	90 40       	sbci	r25, 0x00	; 0
 3c6:	20 40       	sbci	r18, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <main+0x136>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <main+0x140>
 3cc:	00 00       	nop
		_delay_ms(1000);

		char thingSpeakStart[] = "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n" ;
 3ce:	8c e2       	ldi	r24, 0x2C	; 44
 3d0:	e1 ec       	ldi	r30, 0xC1	; 193
 3d2:	f1 e0       	ldi	r31, 0x01	; 1
 3d4:	de 01       	movw	r26, r28
 3d6:	a5 55       	subi	r26, 0x55	; 85
 3d8:	bf 4f       	sbci	r27, 0xFF	; 255
 3da:	01 90       	ld	r0, Z+
 3dc:	0d 92       	st	X+, r0
 3de:	8a 95       	dec	r24
 3e0:	e1 f7       	brne	.-8      	; 0x3da <main+0x14e>
		USART_SendString(thingSpeakStart);
 3e2:	ce 01       	movw	r24, r28
 3e4:	85 55       	subi	r24, 0x55	; 85
 3e6:	9f 4f       	sbci	r25, 0xFF	; 255
 3e8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <USART_SendString>
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	93 ed       	ldi	r25, 0xD3	; 211
 3f0:	20 e3       	ldi	r18, 0x30	; 48
 3f2:	81 50       	subi	r24, 0x01	; 1
 3f4:	90 40       	sbci	r25, 0x00	; 0
 3f6:	20 40       	sbci	r18, 0x00	; 0
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <main+0x166>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <main+0x170>
 3fc:	00 00       	nop
		_delay_ms(1000); //add in delay to allow for proper interactions

		char thingSpeakSend[] = "AT+CIPSEND=119\r\n"; //saying we'll send more data than we actually will
 3fe:	81 e1       	ldi	r24, 0x11	; 17
 400:	ed ee       	ldi	r30, 0xED	; 237
 402:	f1 e0       	ldi	r31, 0x01	; 1
 404:	de 01       	movw	r26, r28
 406:	a9 52       	subi	r26, 0x29	; 41
 408:	bf 4f       	sbci	r27, 0xFF	; 255
 40a:	01 90       	ld	r0, Z+
 40c:	0d 92       	st	X+, r0
 40e:	8a 95       	dec	r24
 410:	e1 f7       	brne	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		USART_SendString(thingSpeakSend);
 412:	ce 01       	movw	r24, r28
 414:	89 52       	subi	r24, 0x29	; 41
 416:	9f 4f       	sbci	r25, 0xFF	; 255
 418:	0e 94 72 02 	call	0x4e4	; 0x4e4 <USART_SendString>
 41c:	8f ef       	ldi	r24, 0xFF	; 255
 41e:	93 ed       	ldi	r25, 0xD3	; 211
 420:	20 e3       	ldi	r18, 0x30	; 48
 422:	81 50       	subi	r24, 0x01	; 1
 424:	90 40       	sbci	r25, 0x00	; 0
 426:	20 40       	sbci	r18, 0x00	; 0
 428:	e1 f7       	brne	.-8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42c:	00 00       	nop
		_delay_ms(1000);
		
		snprintf(thingSpeakUpdate, sizeof(thingSpeakUpdate), "GET https://api.thingspeak.com/update?api_key=P7JD9OICCNIR59PL&field1=%d&field2=%d&field3=%d&field4=%d\r\n", Clear_data, Red_data, Green_data, Blue_data);
 42e:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Blue_data+0x1>
 432:	8f 93       	push	r24
 434:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <Blue_data>
 438:	8f 93       	push	r24
 43a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <Green_data+0x1>
 43e:	8f 93       	push	r24
 440:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Green_data>
 444:	8f 93       	push	r24
 446:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Red_data+0x1>
 44a:	8f 93       	push	r24
 44c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <Red_data>
 450:	8f 93       	push	r24
 452:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <__data_end+0x1>
 456:	8f 93       	push	r24
 458:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 45c:	8f 93       	push	r24
 45e:	5f 92       	push	r5
 460:	4f 92       	push	r4
 462:	1f 92       	push	r1
 464:	3f 92       	push	r3
 466:	ff 92       	push	r15
 468:	ef 92       	push	r14
 46a:	0e 94 81 02 	call	0x502	; 0x502 <snprintf>
		USART_SendString(thingSpeakUpdate);
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	f8 94       	cli
 472:	de bf       	out	0x3e, r29	; 62
 474:	0f be       	out	0x3f, r0	; 63
 476:	cd bf       	out	0x3d, r28	; 61
 478:	c7 01       	movw	r24, r14
 47a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <USART_SendString>
 47e:	9f ef       	ldi	r25, 0xFF	; 255
 480:	23 ed       	ldi	r18, 0xD3	; 211
 482:	80 e3       	ldi	r24, 0x30	; 48
 484:	91 50       	subi	r25, 0x01	; 1
 486:	20 40       	sbci	r18, 0x00	; 0
 488:	80 40       	sbci	r24, 0x00	; 0
 48a:	e1 f7       	brne	.-8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48e:	00 00       	nop
		_delay_ms(1000);

		char thingSpeakClose[] = "AT+CIPCLOSE\r\n";
 490:	8e e0       	ldi	r24, 0x0E	; 14
 492:	ee ef       	ldi	r30, 0xFE	; 254
 494:	f1 e0       	ldi	r31, 0x01	; 1
 496:	de 01       	movw	r26, r28
 498:	a8 51       	subi	r26, 0x18	; 24
 49a:	bf 4f       	sbci	r27, 0xFF	; 255
 49c:	01 90       	ld	r0, Z+
 49e:	0d 92       	st	X+, r0
 4a0:	8a 95       	dec	r24
 4a2:	e1 f7       	brne	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		USART_SendString(thingSpeakClose);
 4a4:	ce 01       	movw	r24, r28
 4a6:	88 51       	subi	r24, 0x18	; 24
 4a8:	9f 4f       	sbci	r25, 0xFF	; 255
 4aa:	0e 94 72 02 	call	0x4e4	; 0x4e4 <USART_SendString>
 4ae:	9f ef       	ldi	r25, 0xFF	; 255
 4b0:	23 ed       	ldi	r18, 0xD3	; 211
 4b2:	80 e3       	ldi	r24, 0x30	; 48
 4b4:	91 50       	subi	r25, 0x01	; 1
 4b6:	20 40       	sbci	r18, 0x00	; 0
 4b8:	80 40       	sbci	r24, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4be:	00 00       	nop
 4c0:	9f ef       	ldi	r25, 0xFF	; 255
 4c2:	2d e3       	ldi	r18, 0x3D	; 61
 4c4:	89 e4       	ldi	r24, 0x49	; 73
 4c6:	91 50       	subi	r25, 0x01	; 1
 4c8:	20 40       	sbci	r18, 0x00	; 0
 4ca:	80 40       	sbci	r24, 0x00	; 0
 4cc:	e1 f7       	brne	.-8      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4d0:	00 00       	nop
 4d2:	16 cf       	rjmp	.-468    	; 0x300 <main+0x74>

000004d4 <USART_TxChar>:
	return(UDR0);									/* Get and return received data */ 
}

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR0 = data;										/* Write data to be transmitting in UDR */
 4d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while (!(UCSR0A & (1<<UDRE0)));					/* Wait until data transmit and buffer get empty */
 4d8:	e0 ec       	ldi	r30, 0xC0	; 192
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	85 ff       	sbrs	r24, 5
 4e0:	fd cf       	rjmp	.-6      	; 0x4dc <USART_TxChar+0x8>
}
 4e2:	08 95       	ret

000004e4 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	ec 01       	movw	r28, r24
	int i=0;																	
	while (str[i]!=0)
 4ea:	88 81       	ld	r24, Y
 4ec:	88 23       	and	r24, r24
 4ee:	31 f0       	breq	.+12     	; 0x4fc <USART_SendString+0x18>
 4f0:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
 4f2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <USART_TxChar>
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
 4f6:	89 91       	ld	r24, Y+
 4f8:	81 11       	cpse	r24, r1
 4fa:	fb cf       	rjmp	.-10     	; 0x4f2 <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <snprintf>:
 502:	ae e0       	ldi	r26, 0x0E	; 14
 504:	b0 e0       	ldi	r27, 0x00	; 0
 506:	e7 e8       	ldi	r30, 0x87	; 135
 508:	f2 e0       	ldi	r31, 0x02	; 2
 50a:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__prologue_saves__+0x1c>
 50e:	0d 89       	ldd	r16, Y+21	; 0x15
 510:	1e 89       	ldd	r17, Y+22	; 0x16
 512:	8f 89       	ldd	r24, Y+23	; 0x17
 514:	98 8d       	ldd	r25, Y+24	; 0x18
 516:	26 e0       	ldi	r18, 0x06	; 6
 518:	2c 83       	std	Y+4, r18	; 0x04
 51a:	1a 83       	std	Y+2, r17	; 0x02
 51c:	09 83       	std	Y+1, r16	; 0x01
 51e:	97 ff       	sbrs	r25, 7
 520:	02 c0       	rjmp	.+4      	; 0x526 <snprintf+0x24>
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	90 e8       	ldi	r25, 0x80	; 128
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	9e 83       	std	Y+6, r25	; 0x06
 52a:	8d 83       	std	Y+5, r24	; 0x05
 52c:	ae 01       	movw	r20, r28
 52e:	45 5e       	subi	r20, 0xE5	; 229
 530:	5f 4f       	sbci	r21, 0xFF	; 255
 532:	69 8d       	ldd	r22, Y+25	; 0x19
 534:	7a 8d       	ldd	r23, Y+26	; 0x1a
 536:	ce 01       	movw	r24, r28
 538:	01 96       	adiw	r24, 0x01	; 1
 53a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <vfprintf>
 53e:	4d 81       	ldd	r20, Y+5	; 0x05
 540:	5e 81       	ldd	r21, Y+6	; 0x06
 542:	57 fd       	sbrc	r21, 7
 544:	0a c0       	rjmp	.+20     	; 0x55a <snprintf+0x58>
 546:	2f 81       	ldd	r18, Y+7	; 0x07
 548:	38 85       	ldd	r19, Y+8	; 0x08
 54a:	42 17       	cp	r20, r18
 54c:	53 07       	cpc	r21, r19
 54e:	0c f4       	brge	.+2      	; 0x552 <snprintf+0x50>
 550:	9a 01       	movw	r18, r20
 552:	f8 01       	movw	r30, r16
 554:	e2 0f       	add	r30, r18
 556:	f3 1f       	adc	r31, r19
 558:	10 82       	st	Z, r1
 55a:	2e 96       	adiw	r28, 0x0e	; 14
 55c:	e4 e0       	ldi	r30, 0x04	; 4
 55e:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__epilogue_restores__+0x1c>

00000562 <sprintf>:
 562:	ae e0       	ldi	r26, 0x0E	; 14
 564:	b0 e0       	ldi	r27, 0x00	; 0
 566:	e7 eb       	ldi	r30, 0xB7	; 183
 568:	f2 e0       	ldi	r31, 0x02	; 2
 56a:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__prologue_saves__+0x1c>
 56e:	0d 89       	ldd	r16, Y+21	; 0x15
 570:	1e 89       	ldd	r17, Y+22	; 0x16
 572:	86 e0       	ldi	r24, 0x06	; 6
 574:	8c 83       	std	Y+4, r24	; 0x04
 576:	1a 83       	std	Y+2, r17	; 0x02
 578:	09 83       	std	Y+1, r16	; 0x01
 57a:	8f ef       	ldi	r24, 0xFF	; 255
 57c:	9f e7       	ldi	r25, 0x7F	; 127
 57e:	9e 83       	std	Y+6, r25	; 0x06
 580:	8d 83       	std	Y+5, r24	; 0x05
 582:	ae 01       	movw	r20, r28
 584:	47 5e       	subi	r20, 0xE7	; 231
 586:	5f 4f       	sbci	r21, 0xFF	; 255
 588:	6f 89       	ldd	r22, Y+23	; 0x17
 58a:	78 8d       	ldd	r23, Y+24	; 0x18
 58c:	ce 01       	movw	r24, r28
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <vfprintf>
 594:	ef 81       	ldd	r30, Y+7	; 0x07
 596:	f8 85       	ldd	r31, Y+8	; 0x08
 598:	e0 0f       	add	r30, r16
 59a:	f1 1f       	adc	r31, r17
 59c:	10 82       	st	Z, r1
 59e:	2e 96       	adiw	r28, 0x0e	; 14
 5a0:	e4 e0       	ldi	r30, 0x04	; 4
 5a2:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__epilogue_restores__+0x1c>

000005a6 <vfprintf>:
 5a6:	ab e0       	ldi	r26, 0x0B	; 11
 5a8:	b0 e0       	ldi	r27, 0x00	; 0
 5aa:	e9 ed       	ldi	r30, 0xD9	; 217
 5ac:	f2 e0       	ldi	r31, 0x02	; 2
 5ae:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__prologue_saves__>
 5b2:	6c 01       	movw	r12, r24
 5b4:	7b 01       	movw	r14, r22
 5b6:	8a 01       	movw	r16, r20
 5b8:	fc 01       	movw	r30, r24
 5ba:	17 82       	std	Z+7, r1	; 0x07
 5bc:	16 82       	std	Z+6, r1	; 0x06
 5be:	83 81       	ldd	r24, Z+3	; 0x03
 5c0:	81 ff       	sbrs	r24, 1
 5c2:	cc c1       	rjmp	.+920    	; 0x95c <__stack+0x5d>
 5c4:	ce 01       	movw	r24, r28
 5c6:	01 96       	adiw	r24, 0x01	; 1
 5c8:	3c 01       	movw	r6, r24
 5ca:	f6 01       	movw	r30, r12
 5cc:	93 81       	ldd	r25, Z+3	; 0x03
 5ce:	f7 01       	movw	r30, r14
 5d0:	93 fd       	sbrc	r25, 3
 5d2:	85 91       	lpm	r24, Z+
 5d4:	93 ff       	sbrs	r25, 3
 5d6:	81 91       	ld	r24, Z+
 5d8:	7f 01       	movw	r14, r30
 5da:	88 23       	and	r24, r24
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <vfprintf+0x3a>
 5de:	ba c1       	rjmp	.+884    	; 0x954 <__stack+0x55>
 5e0:	85 32       	cpi	r24, 0x25	; 37
 5e2:	39 f4       	brne	.+14     	; 0x5f2 <vfprintf+0x4c>
 5e4:	93 fd       	sbrc	r25, 3
 5e6:	85 91       	lpm	r24, Z+
 5e8:	93 ff       	sbrs	r25, 3
 5ea:	81 91       	ld	r24, Z+
 5ec:	7f 01       	movw	r14, r30
 5ee:	85 32       	cpi	r24, 0x25	; 37
 5f0:	29 f4       	brne	.+10     	; 0x5fc <vfprintf+0x56>
 5f2:	b6 01       	movw	r22, r12
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 ca 04 	call	0x994	; 0x994 <fputc>
 5fa:	e7 cf       	rjmp	.-50     	; 0x5ca <vfprintf+0x24>
 5fc:	91 2c       	mov	r9, r1
 5fe:	21 2c       	mov	r2, r1
 600:	31 2c       	mov	r3, r1
 602:	ff e1       	ldi	r31, 0x1F	; 31
 604:	f3 15       	cp	r31, r3
 606:	d8 f0       	brcs	.+54     	; 0x63e <vfprintf+0x98>
 608:	8b 32       	cpi	r24, 0x2B	; 43
 60a:	79 f0       	breq	.+30     	; 0x62a <vfprintf+0x84>
 60c:	38 f4       	brcc	.+14     	; 0x61c <vfprintf+0x76>
 60e:	80 32       	cpi	r24, 0x20	; 32
 610:	79 f0       	breq	.+30     	; 0x630 <vfprintf+0x8a>
 612:	83 32       	cpi	r24, 0x23	; 35
 614:	a1 f4       	brne	.+40     	; 0x63e <vfprintf+0x98>
 616:	23 2d       	mov	r18, r3
 618:	20 61       	ori	r18, 0x10	; 16
 61a:	1d c0       	rjmp	.+58     	; 0x656 <vfprintf+0xb0>
 61c:	8d 32       	cpi	r24, 0x2D	; 45
 61e:	61 f0       	breq	.+24     	; 0x638 <vfprintf+0x92>
 620:	80 33       	cpi	r24, 0x30	; 48
 622:	69 f4       	brne	.+26     	; 0x63e <vfprintf+0x98>
 624:	23 2d       	mov	r18, r3
 626:	21 60       	ori	r18, 0x01	; 1
 628:	16 c0       	rjmp	.+44     	; 0x656 <vfprintf+0xb0>
 62a:	83 2d       	mov	r24, r3
 62c:	82 60       	ori	r24, 0x02	; 2
 62e:	38 2e       	mov	r3, r24
 630:	e3 2d       	mov	r30, r3
 632:	e4 60       	ori	r30, 0x04	; 4
 634:	3e 2e       	mov	r3, r30
 636:	2a c0       	rjmp	.+84     	; 0x68c <vfprintf+0xe6>
 638:	f3 2d       	mov	r31, r3
 63a:	f8 60       	ori	r31, 0x08	; 8
 63c:	1d c0       	rjmp	.+58     	; 0x678 <vfprintf+0xd2>
 63e:	37 fc       	sbrc	r3, 7
 640:	2d c0       	rjmp	.+90     	; 0x69c <vfprintf+0xf6>
 642:	20 ed       	ldi	r18, 0xD0	; 208
 644:	28 0f       	add	r18, r24
 646:	2a 30       	cpi	r18, 0x0A	; 10
 648:	40 f0       	brcs	.+16     	; 0x65a <vfprintf+0xb4>
 64a:	8e 32       	cpi	r24, 0x2E	; 46
 64c:	b9 f4       	brne	.+46     	; 0x67c <vfprintf+0xd6>
 64e:	36 fc       	sbrc	r3, 6
 650:	81 c1       	rjmp	.+770    	; 0x954 <__stack+0x55>
 652:	23 2d       	mov	r18, r3
 654:	20 64       	ori	r18, 0x40	; 64
 656:	32 2e       	mov	r3, r18
 658:	19 c0       	rjmp	.+50     	; 0x68c <vfprintf+0xe6>
 65a:	36 fe       	sbrs	r3, 6
 65c:	06 c0       	rjmp	.+12     	; 0x66a <vfprintf+0xc4>
 65e:	8a e0       	ldi	r24, 0x0A	; 10
 660:	98 9e       	mul	r9, r24
 662:	20 0d       	add	r18, r0
 664:	11 24       	eor	r1, r1
 666:	92 2e       	mov	r9, r18
 668:	11 c0       	rjmp	.+34     	; 0x68c <vfprintf+0xe6>
 66a:	ea e0       	ldi	r30, 0x0A	; 10
 66c:	2e 9e       	mul	r2, r30
 66e:	20 0d       	add	r18, r0
 670:	11 24       	eor	r1, r1
 672:	22 2e       	mov	r2, r18
 674:	f3 2d       	mov	r31, r3
 676:	f0 62       	ori	r31, 0x20	; 32
 678:	3f 2e       	mov	r3, r31
 67a:	08 c0       	rjmp	.+16     	; 0x68c <vfprintf+0xe6>
 67c:	8c 36       	cpi	r24, 0x6C	; 108
 67e:	21 f4       	brne	.+8      	; 0x688 <vfprintf+0xe2>
 680:	83 2d       	mov	r24, r3
 682:	80 68       	ori	r24, 0x80	; 128
 684:	38 2e       	mov	r3, r24
 686:	02 c0       	rjmp	.+4      	; 0x68c <vfprintf+0xe6>
 688:	88 36       	cpi	r24, 0x68	; 104
 68a:	41 f4       	brne	.+16     	; 0x69c <vfprintf+0xf6>
 68c:	f7 01       	movw	r30, r14
 68e:	93 fd       	sbrc	r25, 3
 690:	85 91       	lpm	r24, Z+
 692:	93 ff       	sbrs	r25, 3
 694:	81 91       	ld	r24, Z+
 696:	7f 01       	movw	r14, r30
 698:	81 11       	cpse	r24, r1
 69a:	b3 cf       	rjmp	.-154    	; 0x602 <vfprintf+0x5c>
 69c:	98 2f       	mov	r25, r24
 69e:	9f 7d       	andi	r25, 0xDF	; 223
 6a0:	95 54       	subi	r25, 0x45	; 69
 6a2:	93 30       	cpi	r25, 0x03	; 3
 6a4:	28 f4       	brcc	.+10     	; 0x6b0 <vfprintf+0x10a>
 6a6:	0c 5f       	subi	r16, 0xFC	; 252
 6a8:	1f 4f       	sbci	r17, 0xFF	; 255
 6aa:	9f e3       	ldi	r25, 0x3F	; 63
 6ac:	99 83       	std	Y+1, r25	; 0x01
 6ae:	0d c0       	rjmp	.+26     	; 0x6ca <vfprintf+0x124>
 6b0:	83 36       	cpi	r24, 0x63	; 99
 6b2:	31 f0       	breq	.+12     	; 0x6c0 <vfprintf+0x11a>
 6b4:	83 37       	cpi	r24, 0x73	; 115
 6b6:	71 f0       	breq	.+28     	; 0x6d4 <vfprintf+0x12e>
 6b8:	83 35       	cpi	r24, 0x53	; 83
 6ba:	09 f0       	breq	.+2      	; 0x6be <vfprintf+0x118>
 6bc:	59 c0       	rjmp	.+178    	; 0x770 <vfprintf+0x1ca>
 6be:	21 c0       	rjmp	.+66     	; 0x702 <vfprintf+0x15c>
 6c0:	f8 01       	movw	r30, r16
 6c2:	80 81       	ld	r24, Z
 6c4:	89 83       	std	Y+1, r24	; 0x01
 6c6:	0e 5f       	subi	r16, 0xFE	; 254
 6c8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ca:	88 24       	eor	r8, r8
 6cc:	83 94       	inc	r8
 6ce:	91 2c       	mov	r9, r1
 6d0:	53 01       	movw	r10, r6
 6d2:	13 c0       	rjmp	.+38     	; 0x6fa <vfprintf+0x154>
 6d4:	28 01       	movw	r4, r16
 6d6:	f2 e0       	ldi	r31, 0x02	; 2
 6d8:	4f 0e       	add	r4, r31
 6da:	51 1c       	adc	r5, r1
 6dc:	f8 01       	movw	r30, r16
 6de:	a0 80       	ld	r10, Z
 6e0:	b1 80       	ldd	r11, Z+1	; 0x01
 6e2:	36 fe       	sbrs	r3, 6
 6e4:	03 c0       	rjmp	.+6      	; 0x6ec <vfprintf+0x146>
 6e6:	69 2d       	mov	r22, r9
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <vfprintf+0x14a>
 6ec:	6f ef       	ldi	r22, 0xFF	; 255
 6ee:	7f ef       	ldi	r23, 0xFF	; 255
 6f0:	c5 01       	movw	r24, r10
 6f2:	0e 94 bf 04 	call	0x97e	; 0x97e <strnlen>
 6f6:	4c 01       	movw	r8, r24
 6f8:	82 01       	movw	r16, r4
 6fa:	f3 2d       	mov	r31, r3
 6fc:	ff 77       	andi	r31, 0x7F	; 127
 6fe:	3f 2e       	mov	r3, r31
 700:	16 c0       	rjmp	.+44     	; 0x72e <vfprintf+0x188>
 702:	28 01       	movw	r4, r16
 704:	22 e0       	ldi	r18, 0x02	; 2
 706:	42 0e       	add	r4, r18
 708:	51 1c       	adc	r5, r1
 70a:	f8 01       	movw	r30, r16
 70c:	a0 80       	ld	r10, Z
 70e:	b1 80       	ldd	r11, Z+1	; 0x01
 710:	36 fe       	sbrs	r3, 6
 712:	03 c0       	rjmp	.+6      	; 0x71a <vfprintf+0x174>
 714:	69 2d       	mov	r22, r9
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	02 c0       	rjmp	.+4      	; 0x71e <vfprintf+0x178>
 71a:	6f ef       	ldi	r22, 0xFF	; 255
 71c:	7f ef       	ldi	r23, 0xFF	; 255
 71e:	c5 01       	movw	r24, r10
 720:	0e 94 b4 04 	call	0x968	; 0x968 <strnlen_P>
 724:	4c 01       	movw	r8, r24
 726:	f3 2d       	mov	r31, r3
 728:	f0 68       	ori	r31, 0x80	; 128
 72a:	3f 2e       	mov	r3, r31
 72c:	82 01       	movw	r16, r4
 72e:	33 fc       	sbrc	r3, 3
 730:	1b c0       	rjmp	.+54     	; 0x768 <vfprintf+0x1c2>
 732:	82 2d       	mov	r24, r2
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	88 16       	cp	r8, r24
 738:	99 06       	cpc	r9, r25
 73a:	b0 f4       	brcc	.+44     	; 0x768 <vfprintf+0x1c2>
 73c:	b6 01       	movw	r22, r12
 73e:	80 e2       	ldi	r24, 0x20	; 32
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	0e 94 ca 04 	call	0x994	; 0x994 <fputc>
 746:	2a 94       	dec	r2
 748:	f4 cf       	rjmp	.-24     	; 0x732 <vfprintf+0x18c>
 74a:	f5 01       	movw	r30, r10
 74c:	37 fc       	sbrc	r3, 7
 74e:	85 91       	lpm	r24, Z+
 750:	37 fe       	sbrs	r3, 7
 752:	81 91       	ld	r24, Z+
 754:	5f 01       	movw	r10, r30
 756:	b6 01       	movw	r22, r12
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 94 ca 04 	call	0x994	; 0x994 <fputc>
 75e:	21 10       	cpse	r2, r1
 760:	2a 94       	dec	r2
 762:	21 e0       	ldi	r18, 0x01	; 1
 764:	82 1a       	sub	r8, r18
 766:	91 08       	sbc	r9, r1
 768:	81 14       	cp	r8, r1
 76a:	91 04       	cpc	r9, r1
 76c:	71 f7       	brne	.-36     	; 0x74a <vfprintf+0x1a4>
 76e:	e8 c0       	rjmp	.+464    	; 0x940 <__stack+0x41>
 770:	84 36       	cpi	r24, 0x64	; 100
 772:	11 f0       	breq	.+4      	; 0x778 <vfprintf+0x1d2>
 774:	89 36       	cpi	r24, 0x69	; 105
 776:	41 f5       	brne	.+80     	; 0x7c8 <vfprintf+0x222>
 778:	f8 01       	movw	r30, r16
 77a:	37 fe       	sbrs	r3, 7
 77c:	07 c0       	rjmp	.+14     	; 0x78c <vfprintf+0x1e6>
 77e:	60 81       	ld	r22, Z
 780:	71 81       	ldd	r23, Z+1	; 0x01
 782:	82 81       	ldd	r24, Z+2	; 0x02
 784:	93 81       	ldd	r25, Z+3	; 0x03
 786:	0c 5f       	subi	r16, 0xFC	; 252
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	08 c0       	rjmp	.+16     	; 0x79c <vfprintf+0x1f6>
 78c:	60 81       	ld	r22, Z
 78e:	71 81       	ldd	r23, Z+1	; 0x01
 790:	07 2e       	mov	r0, r23
 792:	00 0c       	add	r0, r0
 794:	88 0b       	sbc	r24, r24
 796:	99 0b       	sbc	r25, r25
 798:	0e 5f       	subi	r16, 0xFE	; 254
 79a:	1f 4f       	sbci	r17, 0xFF	; 255
 79c:	f3 2d       	mov	r31, r3
 79e:	ff 76       	andi	r31, 0x6F	; 111
 7a0:	3f 2e       	mov	r3, r31
 7a2:	97 ff       	sbrs	r25, 7
 7a4:	09 c0       	rjmp	.+18     	; 0x7b8 <vfprintf+0x212>
 7a6:	90 95       	com	r25
 7a8:	80 95       	com	r24
 7aa:	70 95       	com	r23
 7ac:	61 95       	neg	r22
 7ae:	7f 4f       	sbci	r23, 0xFF	; 255
 7b0:	8f 4f       	sbci	r24, 0xFF	; 255
 7b2:	9f 4f       	sbci	r25, 0xFF	; 255
 7b4:	f0 68       	ori	r31, 0x80	; 128
 7b6:	3f 2e       	mov	r3, r31
 7b8:	2a e0       	ldi	r18, 0x0A	; 10
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	a3 01       	movw	r20, r6
 7be:	0e 94 06 05 	call	0xa0c	; 0xa0c <__ultoa_invert>
 7c2:	88 2e       	mov	r8, r24
 7c4:	86 18       	sub	r8, r6
 7c6:	45 c0       	rjmp	.+138    	; 0x852 <vfprintf+0x2ac>
 7c8:	85 37       	cpi	r24, 0x75	; 117
 7ca:	31 f4       	brne	.+12     	; 0x7d8 <vfprintf+0x232>
 7cc:	23 2d       	mov	r18, r3
 7ce:	2f 7e       	andi	r18, 0xEF	; 239
 7d0:	b2 2e       	mov	r11, r18
 7d2:	2a e0       	ldi	r18, 0x0A	; 10
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	25 c0       	rjmp	.+74     	; 0x822 <vfprintf+0x27c>
 7d8:	93 2d       	mov	r25, r3
 7da:	99 7f       	andi	r25, 0xF9	; 249
 7dc:	b9 2e       	mov	r11, r25
 7de:	8f 36       	cpi	r24, 0x6F	; 111
 7e0:	c1 f0       	breq	.+48     	; 0x812 <vfprintf+0x26c>
 7e2:	18 f4       	brcc	.+6      	; 0x7ea <vfprintf+0x244>
 7e4:	88 35       	cpi	r24, 0x58	; 88
 7e6:	79 f0       	breq	.+30     	; 0x806 <vfprintf+0x260>
 7e8:	b5 c0       	rjmp	.+362    	; 0x954 <__stack+0x55>
 7ea:	80 37       	cpi	r24, 0x70	; 112
 7ec:	19 f0       	breq	.+6      	; 0x7f4 <vfprintf+0x24e>
 7ee:	88 37       	cpi	r24, 0x78	; 120
 7f0:	21 f0       	breq	.+8      	; 0x7fa <vfprintf+0x254>
 7f2:	b0 c0       	rjmp	.+352    	; 0x954 <__stack+0x55>
 7f4:	e9 2f       	mov	r30, r25
 7f6:	e0 61       	ori	r30, 0x10	; 16
 7f8:	be 2e       	mov	r11, r30
 7fa:	b4 fe       	sbrs	r11, 4
 7fc:	0d c0       	rjmp	.+26     	; 0x818 <vfprintf+0x272>
 7fe:	fb 2d       	mov	r31, r11
 800:	f4 60       	ori	r31, 0x04	; 4
 802:	bf 2e       	mov	r11, r31
 804:	09 c0       	rjmp	.+18     	; 0x818 <vfprintf+0x272>
 806:	34 fe       	sbrs	r3, 4
 808:	0a c0       	rjmp	.+20     	; 0x81e <vfprintf+0x278>
 80a:	29 2f       	mov	r18, r25
 80c:	26 60       	ori	r18, 0x06	; 6
 80e:	b2 2e       	mov	r11, r18
 810:	06 c0       	rjmp	.+12     	; 0x81e <vfprintf+0x278>
 812:	28 e0       	ldi	r18, 0x08	; 8
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	05 c0       	rjmp	.+10     	; 0x822 <vfprintf+0x27c>
 818:	20 e1       	ldi	r18, 0x10	; 16
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	02 c0       	rjmp	.+4      	; 0x822 <vfprintf+0x27c>
 81e:	20 e1       	ldi	r18, 0x10	; 16
 820:	32 e0       	ldi	r19, 0x02	; 2
 822:	f8 01       	movw	r30, r16
 824:	b7 fe       	sbrs	r11, 7
 826:	07 c0       	rjmp	.+14     	; 0x836 <vfprintf+0x290>
 828:	60 81       	ld	r22, Z
 82a:	71 81       	ldd	r23, Z+1	; 0x01
 82c:	82 81       	ldd	r24, Z+2	; 0x02
 82e:	93 81       	ldd	r25, Z+3	; 0x03
 830:	0c 5f       	subi	r16, 0xFC	; 252
 832:	1f 4f       	sbci	r17, 0xFF	; 255
 834:	06 c0       	rjmp	.+12     	; 0x842 <vfprintf+0x29c>
 836:	60 81       	ld	r22, Z
 838:	71 81       	ldd	r23, Z+1	; 0x01
 83a:	80 e0       	ldi	r24, 0x00	; 0
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	0e 5f       	subi	r16, 0xFE	; 254
 840:	1f 4f       	sbci	r17, 0xFF	; 255
 842:	a3 01       	movw	r20, r6
 844:	0e 94 06 05 	call	0xa0c	; 0xa0c <__ultoa_invert>
 848:	88 2e       	mov	r8, r24
 84a:	86 18       	sub	r8, r6
 84c:	fb 2d       	mov	r31, r11
 84e:	ff 77       	andi	r31, 0x7F	; 127
 850:	3f 2e       	mov	r3, r31
 852:	36 fe       	sbrs	r3, 6
 854:	0d c0       	rjmp	.+26     	; 0x870 <vfprintf+0x2ca>
 856:	23 2d       	mov	r18, r3
 858:	2e 7f       	andi	r18, 0xFE	; 254
 85a:	a2 2e       	mov	r10, r18
 85c:	89 14       	cp	r8, r9
 85e:	58 f4       	brcc	.+22     	; 0x876 <vfprintf+0x2d0>
 860:	34 fe       	sbrs	r3, 4
 862:	0b c0       	rjmp	.+22     	; 0x87a <vfprintf+0x2d4>
 864:	32 fc       	sbrc	r3, 2
 866:	09 c0       	rjmp	.+18     	; 0x87a <vfprintf+0x2d4>
 868:	83 2d       	mov	r24, r3
 86a:	8e 7e       	andi	r24, 0xEE	; 238
 86c:	a8 2e       	mov	r10, r24
 86e:	05 c0       	rjmp	.+10     	; 0x87a <vfprintf+0x2d4>
 870:	b8 2c       	mov	r11, r8
 872:	a3 2c       	mov	r10, r3
 874:	03 c0       	rjmp	.+6      	; 0x87c <vfprintf+0x2d6>
 876:	b8 2c       	mov	r11, r8
 878:	01 c0       	rjmp	.+2      	; 0x87c <vfprintf+0x2d6>
 87a:	b9 2c       	mov	r11, r9
 87c:	a4 fe       	sbrs	r10, 4
 87e:	0f c0       	rjmp	.+30     	; 0x89e <vfprintf+0x2f8>
 880:	fe 01       	movw	r30, r28
 882:	e8 0d       	add	r30, r8
 884:	f1 1d       	adc	r31, r1
 886:	80 81       	ld	r24, Z
 888:	80 33       	cpi	r24, 0x30	; 48
 88a:	21 f4       	brne	.+8      	; 0x894 <vfprintf+0x2ee>
 88c:	9a 2d       	mov	r25, r10
 88e:	99 7e       	andi	r25, 0xE9	; 233
 890:	a9 2e       	mov	r10, r25
 892:	09 c0       	rjmp	.+18     	; 0x8a6 <vfprintf+0x300>
 894:	a2 fe       	sbrs	r10, 2
 896:	06 c0       	rjmp	.+12     	; 0x8a4 <vfprintf+0x2fe>
 898:	b3 94       	inc	r11
 89a:	b3 94       	inc	r11
 89c:	04 c0       	rjmp	.+8      	; 0x8a6 <vfprintf+0x300>
 89e:	8a 2d       	mov	r24, r10
 8a0:	86 78       	andi	r24, 0x86	; 134
 8a2:	09 f0       	breq	.+2      	; 0x8a6 <vfprintf+0x300>
 8a4:	b3 94       	inc	r11
 8a6:	a3 fc       	sbrc	r10, 3
 8a8:	11 c0       	rjmp	.+34     	; 0x8cc <vfprintf+0x326>
 8aa:	a0 fe       	sbrs	r10, 0
 8ac:	06 c0       	rjmp	.+12     	; 0x8ba <vfprintf+0x314>
 8ae:	b2 14       	cp	r11, r2
 8b0:	88 f4       	brcc	.+34     	; 0x8d4 <vfprintf+0x32e>
 8b2:	28 0c       	add	r2, r8
 8b4:	92 2c       	mov	r9, r2
 8b6:	9b 18       	sub	r9, r11
 8b8:	0e c0       	rjmp	.+28     	; 0x8d6 <vfprintf+0x330>
 8ba:	b2 14       	cp	r11, r2
 8bc:	60 f4       	brcc	.+24     	; 0x8d6 <vfprintf+0x330>
 8be:	b6 01       	movw	r22, r12
 8c0:	80 e2       	ldi	r24, 0x20	; 32
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	0e 94 ca 04 	call	0x994	; 0x994 <fputc>
 8c8:	b3 94       	inc	r11
 8ca:	f7 cf       	rjmp	.-18     	; 0x8ba <vfprintf+0x314>
 8cc:	b2 14       	cp	r11, r2
 8ce:	18 f4       	brcc	.+6      	; 0x8d6 <vfprintf+0x330>
 8d0:	2b 18       	sub	r2, r11
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <vfprintf+0x332>
 8d4:	98 2c       	mov	r9, r8
 8d6:	21 2c       	mov	r2, r1
 8d8:	a4 fe       	sbrs	r10, 4
 8da:	10 c0       	rjmp	.+32     	; 0x8fc <vfprintf+0x356>
 8dc:	b6 01       	movw	r22, r12
 8de:	80 e3       	ldi	r24, 0x30	; 48
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	0e 94 ca 04 	call	0x994	; 0x994 <fputc>
 8e6:	a2 fe       	sbrs	r10, 2
 8e8:	17 c0       	rjmp	.+46     	; 0x918 <__stack+0x19>
 8ea:	a1 fc       	sbrc	r10, 1
 8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <vfprintf+0x34e>
 8ee:	88 e7       	ldi	r24, 0x78	; 120
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <vfprintf+0x352>
 8f4:	88 e5       	ldi	r24, 0x58	; 88
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	b6 01       	movw	r22, r12
 8fa:	0c c0       	rjmp	.+24     	; 0x914 <__stack+0x15>
 8fc:	8a 2d       	mov	r24, r10
 8fe:	86 78       	andi	r24, 0x86	; 134
 900:	59 f0       	breq	.+22     	; 0x918 <__stack+0x19>
 902:	a1 fe       	sbrs	r10, 1
 904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xb>
 906:	8b e2       	ldi	r24, 0x2B	; 43
 908:	01 c0       	rjmp	.+2      	; 0x90c <__stack+0xd>
 90a:	80 e2       	ldi	r24, 0x20	; 32
 90c:	a7 fc       	sbrc	r10, 7
 90e:	8d e2       	ldi	r24, 0x2D	; 45
 910:	b6 01       	movw	r22, r12
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	0e 94 ca 04 	call	0x994	; 0x994 <fputc>
 918:	89 14       	cp	r8, r9
 91a:	38 f4       	brcc	.+14     	; 0x92a <__stack+0x2b>
 91c:	b6 01       	movw	r22, r12
 91e:	80 e3       	ldi	r24, 0x30	; 48
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	0e 94 ca 04 	call	0x994	; 0x994 <fputc>
 926:	9a 94       	dec	r9
 928:	f7 cf       	rjmp	.-18     	; 0x918 <__stack+0x19>
 92a:	8a 94       	dec	r8
 92c:	f3 01       	movw	r30, r6
 92e:	e8 0d       	add	r30, r8
 930:	f1 1d       	adc	r31, r1
 932:	80 81       	ld	r24, Z
 934:	b6 01       	movw	r22, r12
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	0e 94 ca 04 	call	0x994	; 0x994 <fputc>
 93c:	81 10       	cpse	r8, r1
 93e:	f5 cf       	rjmp	.-22     	; 0x92a <__stack+0x2b>
 940:	22 20       	and	r2, r2
 942:	09 f4       	brne	.+2      	; 0x946 <__stack+0x47>
 944:	42 ce       	rjmp	.-892    	; 0x5ca <vfprintf+0x24>
 946:	b6 01       	movw	r22, r12
 948:	80 e2       	ldi	r24, 0x20	; 32
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 ca 04 	call	0x994	; 0x994 <fputc>
 950:	2a 94       	dec	r2
 952:	f6 cf       	rjmp	.-20     	; 0x940 <__stack+0x41>
 954:	f6 01       	movw	r30, r12
 956:	86 81       	ldd	r24, Z+6	; 0x06
 958:	97 81       	ldd	r25, Z+7	; 0x07
 95a:	02 c0       	rjmp	.+4      	; 0x960 <__stack+0x61>
 95c:	8f ef       	ldi	r24, 0xFF	; 255
 95e:	9f ef       	ldi	r25, 0xFF	; 255
 960:	2b 96       	adiw	r28, 0x0b	; 11
 962:	e2 e1       	ldi	r30, 0x12	; 18
 964:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__epilogue_restores__>

00000968 <strnlen_P>:
 968:	fc 01       	movw	r30, r24
 96a:	05 90       	lpm	r0, Z+
 96c:	61 50       	subi	r22, 0x01	; 1
 96e:	70 40       	sbci	r23, 0x00	; 0
 970:	01 10       	cpse	r0, r1
 972:	d8 f7       	brcc	.-10     	; 0x96a <strnlen_P+0x2>
 974:	80 95       	com	r24
 976:	90 95       	com	r25
 978:	8e 0f       	add	r24, r30
 97a:	9f 1f       	adc	r25, r31
 97c:	08 95       	ret

0000097e <strnlen>:
 97e:	fc 01       	movw	r30, r24
 980:	61 50       	subi	r22, 0x01	; 1
 982:	70 40       	sbci	r23, 0x00	; 0
 984:	01 90       	ld	r0, Z+
 986:	01 10       	cpse	r0, r1
 988:	d8 f7       	brcc	.-10     	; 0x980 <strnlen+0x2>
 98a:	80 95       	com	r24
 98c:	90 95       	com	r25
 98e:	8e 0f       	add	r24, r30
 990:	9f 1f       	adc	r25, r31
 992:	08 95       	ret

00000994 <fputc>:
 994:	0f 93       	push	r16
 996:	1f 93       	push	r17
 998:	cf 93       	push	r28
 99a:	df 93       	push	r29
 99c:	fb 01       	movw	r30, r22
 99e:	23 81       	ldd	r18, Z+3	; 0x03
 9a0:	21 fd       	sbrc	r18, 1
 9a2:	03 c0       	rjmp	.+6      	; 0x9aa <fputc+0x16>
 9a4:	8f ef       	ldi	r24, 0xFF	; 255
 9a6:	9f ef       	ldi	r25, 0xFF	; 255
 9a8:	2c c0       	rjmp	.+88     	; 0xa02 <fputc+0x6e>
 9aa:	22 ff       	sbrs	r18, 2
 9ac:	16 c0       	rjmp	.+44     	; 0x9da <fputc+0x46>
 9ae:	46 81       	ldd	r20, Z+6	; 0x06
 9b0:	57 81       	ldd	r21, Z+7	; 0x07
 9b2:	24 81       	ldd	r18, Z+4	; 0x04
 9b4:	35 81       	ldd	r19, Z+5	; 0x05
 9b6:	42 17       	cp	r20, r18
 9b8:	53 07       	cpc	r21, r19
 9ba:	44 f4       	brge	.+16     	; 0x9cc <fputc+0x38>
 9bc:	a0 81       	ld	r26, Z
 9be:	b1 81       	ldd	r27, Z+1	; 0x01
 9c0:	9d 01       	movw	r18, r26
 9c2:	2f 5f       	subi	r18, 0xFF	; 255
 9c4:	3f 4f       	sbci	r19, 0xFF	; 255
 9c6:	31 83       	std	Z+1, r19	; 0x01
 9c8:	20 83       	st	Z, r18
 9ca:	8c 93       	st	X, r24
 9cc:	26 81       	ldd	r18, Z+6	; 0x06
 9ce:	37 81       	ldd	r19, Z+7	; 0x07
 9d0:	2f 5f       	subi	r18, 0xFF	; 255
 9d2:	3f 4f       	sbci	r19, 0xFF	; 255
 9d4:	37 83       	std	Z+7, r19	; 0x07
 9d6:	26 83       	std	Z+6, r18	; 0x06
 9d8:	14 c0       	rjmp	.+40     	; 0xa02 <fputc+0x6e>
 9da:	8b 01       	movw	r16, r22
 9dc:	ec 01       	movw	r28, r24
 9de:	fb 01       	movw	r30, r22
 9e0:	00 84       	ldd	r0, Z+8	; 0x08
 9e2:	f1 85       	ldd	r31, Z+9	; 0x09
 9e4:	e0 2d       	mov	r30, r0
 9e6:	09 95       	icall
 9e8:	89 2b       	or	r24, r25
 9ea:	e1 f6       	brne	.-72     	; 0x9a4 <fputc+0x10>
 9ec:	d8 01       	movw	r26, r16
 9ee:	16 96       	adiw	r26, 0x06	; 6
 9f0:	8d 91       	ld	r24, X+
 9f2:	9c 91       	ld	r25, X
 9f4:	17 97       	sbiw	r26, 0x07	; 7
 9f6:	01 96       	adiw	r24, 0x01	; 1
 9f8:	17 96       	adiw	r26, 0x07	; 7
 9fa:	9c 93       	st	X, r25
 9fc:	8e 93       	st	-X, r24
 9fe:	16 97       	sbiw	r26, 0x06	; 6
 a00:	ce 01       	movw	r24, r28
 a02:	df 91       	pop	r29
 a04:	cf 91       	pop	r28
 a06:	1f 91       	pop	r17
 a08:	0f 91       	pop	r16
 a0a:	08 95       	ret

00000a0c <__ultoa_invert>:
 a0c:	fa 01       	movw	r30, r20
 a0e:	aa 27       	eor	r26, r26
 a10:	28 30       	cpi	r18, 0x08	; 8
 a12:	51 f1       	breq	.+84     	; 0xa68 <__ultoa_invert+0x5c>
 a14:	20 31       	cpi	r18, 0x10	; 16
 a16:	81 f1       	breq	.+96     	; 0xa78 <__ultoa_invert+0x6c>
 a18:	e8 94       	clt
 a1a:	6f 93       	push	r22
 a1c:	6e 7f       	andi	r22, 0xFE	; 254
 a1e:	6e 5f       	subi	r22, 0xFE	; 254
 a20:	7f 4f       	sbci	r23, 0xFF	; 255
 a22:	8f 4f       	sbci	r24, 0xFF	; 255
 a24:	9f 4f       	sbci	r25, 0xFF	; 255
 a26:	af 4f       	sbci	r26, 0xFF	; 255
 a28:	b1 e0       	ldi	r27, 0x01	; 1
 a2a:	3e d0       	rcall	.+124    	; 0xaa8 <__ultoa_invert+0x9c>
 a2c:	b4 e0       	ldi	r27, 0x04	; 4
 a2e:	3c d0       	rcall	.+120    	; 0xaa8 <__ultoa_invert+0x9c>
 a30:	67 0f       	add	r22, r23
 a32:	78 1f       	adc	r23, r24
 a34:	89 1f       	adc	r24, r25
 a36:	9a 1f       	adc	r25, r26
 a38:	a1 1d       	adc	r26, r1
 a3a:	68 0f       	add	r22, r24
 a3c:	79 1f       	adc	r23, r25
 a3e:	8a 1f       	adc	r24, r26
 a40:	91 1d       	adc	r25, r1
 a42:	a1 1d       	adc	r26, r1
 a44:	6a 0f       	add	r22, r26
 a46:	71 1d       	adc	r23, r1
 a48:	81 1d       	adc	r24, r1
 a4a:	91 1d       	adc	r25, r1
 a4c:	a1 1d       	adc	r26, r1
 a4e:	20 d0       	rcall	.+64     	; 0xa90 <__ultoa_invert+0x84>
 a50:	09 f4       	brne	.+2      	; 0xa54 <__ultoa_invert+0x48>
 a52:	68 94       	set
 a54:	3f 91       	pop	r19
 a56:	2a e0       	ldi	r18, 0x0A	; 10
 a58:	26 9f       	mul	r18, r22
 a5a:	11 24       	eor	r1, r1
 a5c:	30 19       	sub	r19, r0
 a5e:	30 5d       	subi	r19, 0xD0	; 208
 a60:	31 93       	st	Z+, r19
 a62:	de f6       	brtc	.-74     	; 0xa1a <__ultoa_invert+0xe>
 a64:	cf 01       	movw	r24, r30
 a66:	08 95       	ret
 a68:	46 2f       	mov	r20, r22
 a6a:	47 70       	andi	r20, 0x07	; 7
 a6c:	40 5d       	subi	r20, 0xD0	; 208
 a6e:	41 93       	st	Z+, r20
 a70:	b3 e0       	ldi	r27, 0x03	; 3
 a72:	0f d0       	rcall	.+30     	; 0xa92 <__ultoa_invert+0x86>
 a74:	c9 f7       	brne	.-14     	; 0xa68 <__ultoa_invert+0x5c>
 a76:	f6 cf       	rjmp	.-20     	; 0xa64 <__ultoa_invert+0x58>
 a78:	46 2f       	mov	r20, r22
 a7a:	4f 70       	andi	r20, 0x0F	; 15
 a7c:	40 5d       	subi	r20, 0xD0	; 208
 a7e:	4a 33       	cpi	r20, 0x3A	; 58
 a80:	18 f0       	brcs	.+6      	; 0xa88 <__ultoa_invert+0x7c>
 a82:	49 5d       	subi	r20, 0xD9	; 217
 a84:	31 fd       	sbrc	r19, 1
 a86:	40 52       	subi	r20, 0x20	; 32
 a88:	41 93       	st	Z+, r20
 a8a:	02 d0       	rcall	.+4      	; 0xa90 <__ultoa_invert+0x84>
 a8c:	a9 f7       	brne	.-22     	; 0xa78 <__ultoa_invert+0x6c>
 a8e:	ea cf       	rjmp	.-44     	; 0xa64 <__ultoa_invert+0x58>
 a90:	b4 e0       	ldi	r27, 0x04	; 4
 a92:	a6 95       	lsr	r26
 a94:	97 95       	ror	r25
 a96:	87 95       	ror	r24
 a98:	77 95       	ror	r23
 a9a:	67 95       	ror	r22
 a9c:	ba 95       	dec	r27
 a9e:	c9 f7       	brne	.-14     	; 0xa92 <__ultoa_invert+0x86>
 aa0:	00 97       	sbiw	r24, 0x00	; 0
 aa2:	61 05       	cpc	r22, r1
 aa4:	71 05       	cpc	r23, r1
 aa6:	08 95       	ret
 aa8:	9b 01       	movw	r18, r22
 aaa:	ac 01       	movw	r20, r24
 aac:	0a 2e       	mov	r0, r26
 aae:	06 94       	lsr	r0
 ab0:	57 95       	ror	r21
 ab2:	47 95       	ror	r20
 ab4:	37 95       	ror	r19
 ab6:	27 95       	ror	r18
 ab8:	ba 95       	dec	r27
 aba:	c9 f7       	brne	.-14     	; 0xaae <__ultoa_invert+0xa2>
 abc:	62 0f       	add	r22, r18
 abe:	73 1f       	adc	r23, r19
 ac0:	84 1f       	adc	r24, r20
 ac2:	95 1f       	adc	r25, r21
 ac4:	a0 1d       	adc	r26, r0
 ac6:	08 95       	ret

00000ac8 <__prologue_saves__>:
 ac8:	2f 92       	push	r2
 aca:	3f 92       	push	r3
 acc:	4f 92       	push	r4
 ace:	5f 92       	push	r5
 ad0:	6f 92       	push	r6
 ad2:	7f 92       	push	r7
 ad4:	8f 92       	push	r8
 ad6:	9f 92       	push	r9
 ad8:	af 92       	push	r10
 ada:	bf 92       	push	r11
 adc:	cf 92       	push	r12
 ade:	df 92       	push	r13
 ae0:	ef 92       	push	r14
 ae2:	ff 92       	push	r15
 ae4:	0f 93       	push	r16
 ae6:	1f 93       	push	r17
 ae8:	cf 93       	push	r28
 aea:	df 93       	push	r29
 aec:	cd b7       	in	r28, 0x3d	; 61
 aee:	de b7       	in	r29, 0x3e	; 62
 af0:	ca 1b       	sub	r28, r26
 af2:	db 0b       	sbc	r29, r27
 af4:	0f b6       	in	r0, 0x3f	; 63
 af6:	f8 94       	cli
 af8:	de bf       	out	0x3e, r29	; 62
 afa:	0f be       	out	0x3f, r0	; 63
 afc:	cd bf       	out	0x3d, r28	; 61
 afe:	09 94       	ijmp

00000b00 <__epilogue_restores__>:
 b00:	2a 88       	ldd	r2, Y+18	; 0x12
 b02:	39 88       	ldd	r3, Y+17	; 0x11
 b04:	48 88       	ldd	r4, Y+16	; 0x10
 b06:	5f 84       	ldd	r5, Y+15	; 0x0f
 b08:	6e 84       	ldd	r6, Y+14	; 0x0e
 b0a:	7d 84       	ldd	r7, Y+13	; 0x0d
 b0c:	8c 84       	ldd	r8, Y+12	; 0x0c
 b0e:	9b 84       	ldd	r9, Y+11	; 0x0b
 b10:	aa 84       	ldd	r10, Y+10	; 0x0a
 b12:	b9 84       	ldd	r11, Y+9	; 0x09
 b14:	c8 84       	ldd	r12, Y+8	; 0x08
 b16:	df 80       	ldd	r13, Y+7	; 0x07
 b18:	ee 80       	ldd	r14, Y+6	; 0x06
 b1a:	fd 80       	ldd	r15, Y+5	; 0x05
 b1c:	0c 81       	ldd	r16, Y+4	; 0x04
 b1e:	1b 81       	ldd	r17, Y+3	; 0x03
 b20:	aa 81       	ldd	r26, Y+2	; 0x02
 b22:	b9 81       	ldd	r27, Y+1	; 0x01
 b24:	ce 0f       	add	r28, r30
 b26:	d1 1d       	adc	r29, r1
 b28:	0f b6       	in	r0, 0x3f	; 63
 b2a:	f8 94       	cli
 b2c:	de bf       	out	0x3e, r29	; 62
 b2e:	0f be       	out	0x3f, r0	; 63
 b30:	cd bf       	out	0x3d, r28	; 61
 b32:	ed 01       	movw	r28, r26
 b34:	08 95       	ret

00000b36 <_exit>:
 b36:	f8 94       	cli

00000b38 <__stop_program>:
 b38:	ff cf       	rjmp	.-2      	; 0xb38 <__stop_program>
